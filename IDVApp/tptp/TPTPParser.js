// Generated from TPTP.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import TPTPListener from './TPTPListener.js';
const serializedATN = [4,1,105,1746,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,1,0,5,0,456,8,0,10,0,12,0,459,9,0,1,0,1,0,1,1,1,1,3,1,465,8,
1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,473,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,
10,536,8,10,1,11,1,11,1,11,1,11,3,11,542,8,11,1,12,1,12,1,12,3,12,547,8,
12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,555,8,13,1,14,1,14,1,14,3,14,560,8,
14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,569,8,16,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,17,5,17,579,8,17,10,17,12,17,582,9,17,1,18,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,5,18,592,8,18,10,18,12,18,595,9,18,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,5,19,605,8,19,10,19,12,19,608,9,19,1,20,1,20,1,
20,3,20,613,8,20,1,21,1,21,3,21,617,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
22,3,22,626,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
1,25,1,25,1,25,3,25,642,8,25,1,26,1,26,1,26,1,26,1,27,1,27,3,27,650,8,27,
1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,663,8,30,1,31,
1,31,3,31,667,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,677,8,32,
1,33,1,33,3,33,681,8,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,
1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,702,8,37,1,38,1,38,1,38,
1,38,1,38,3,38,709,8,38,1,39,1,39,1,39,1,39,1,39,3,39,716,8,39,1,40,1,40,
1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,727,8,41,1,42,1,42,1,42,1,42,1,42,
1,42,3,42,735,8,42,1,43,1,43,1,43,1,43,1,43,3,43,742,8,43,1,44,1,44,1,44,
1,44,1,44,3,44,749,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
1,45,1,45,1,45,1,45,1,45,3,45,766,8,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
3,47,775,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,785,8,48,1,49,
1,49,1,49,3,49,790,8,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,3,52,799,8,52,
1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,809,8,53,1,54,1,54,1,54,1,54,
1,54,1,54,1,54,1,54,5,54,819,8,54,10,54,12,54,822,9,54,1,55,1,55,1,55,1,
55,1,55,1,55,1,55,1,55,5,55,832,8,55,10,55,12,55,835,9,55,1,56,1,56,1,56,
1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,3,59,852,8,59,
1,60,1,60,1,60,1,60,1,60,1,60,3,60,860,8,60,1,61,1,61,3,61,864,8,61,1,62,
1,62,1,62,1,62,1,63,1,63,3,63,872,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
1,64,5,64,882,8,64,10,64,12,64,885,9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,5,65,895,8,65,10,65,12,65,898,9,65,1,66,1,66,1,66,3,66,903,8,66,
1,67,1,67,3,67,907,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,916,8,68,
1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,3,
71,932,8,71,1,72,1,72,3,72,936,8,72,1,73,1,73,1,73,1,73,1,74,1,74,3,74,944,
8,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,3,77,956,8,77,1,78,
1,78,1,78,1,78,1,78,1,78,3,78,964,8,78,1,79,1,79,1,80,1,80,1,80,1,80,1,80,
1,80,1,80,1,80,3,80,976,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,
1,82,3,82,988,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,
1,84,1,84,3,84,1003,8,84,1,85,1,85,1,85,1,85,1,85,3,85,1010,8,85,1,86,1,
86,1,86,1,86,1,86,3,86,1017,8,86,1,87,1,87,1,87,1,87,1,88,1,88,3,88,1025,
8,88,1,89,1,89,1,89,1,89,1,89,3,89,1032,8,89,1,90,1,90,1,90,1,90,1,90,1,
90,1,91,1,91,1,91,3,91,1043,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
3,92,1053,8,92,1,93,1,93,1,93,1,93,1,93,3,93,1060,8,93,1,94,1,94,1,94,1,
94,1,94,3,94,1067,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1077,
8,95,1,96,1,96,3,96,1081,8,96,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1089,8,
97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,
1104,8,99,1,100,1,100,1,100,1,100,1,100,3,100,1111,8,100,1,101,1,101,1,101,
1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1126,8,
101,1,102,1,102,1,102,1,102,1,102,3,102,1133,8,102,1,103,1,103,1,103,1,103,
1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,5,104,1147,8,104,10,104,
12,104,1150,9,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
3,106,1161,8,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,109,1,
109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,
110,3,110,1185,8,110,1,111,1,111,1,111,1,111,1,111,3,111,1192,8,111,1,112,
1,112,3,112,1196,8,112,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,
114,1,114,1,114,1,114,3,114,1210,8,114,1,115,1,115,1,115,1,115,1,115,3,115,
1217,8,115,1,116,1,116,3,116,1221,8,116,1,117,1,117,1,118,1,118,1,119,1,
119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1236,8,120,1,121,1,121,
3,121,1240,8,121,1,122,1,122,3,122,1244,8,122,1,123,1,123,1,123,1,123,1,
123,1,123,1,123,1,124,1,124,3,124,1255,8,124,1,125,1,125,1,125,3,125,1260,
8,125,1,126,1,126,3,126,1264,8,126,1,127,1,127,1,127,1,127,1,128,1,128,3,
128,1272,8,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,5,129,1282,
8,129,10,129,12,129,1285,9,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
1,130,5,130,1295,8,130,10,130,12,130,1298,9,130,1,131,1,131,1,131,1,131,
3,131,1304,8,131,1,132,1,132,1,132,1,132,1,133,1,133,3,133,1312,8,133,1,
134,1,134,1,134,1,134,1,134,1,134,3,134,1320,8,134,1,135,1,135,1,135,1,135,
1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,3,136,1334,8,136,1,137,1,
137,1,137,3,137,1339,8,137,1,138,1,138,1,139,1,139,3,139,1345,8,139,1,140,
1,140,1,141,1,141,1,141,1,141,1,142,1,142,1,143,1,143,1,143,1,143,1,143,
1,143,3,143,1361,8,143,1,144,1,144,3,144,1365,8,144,1,145,1,145,1,146,1,
146,1,146,1,146,1,146,1,146,3,146,1375,8,146,1,147,1,147,1,147,1,147,1,147,
1,147,3,147,1383,8,147,1,148,1,148,1,148,1,148,1,148,3,148,1390,8,148,1,
149,1,149,3,149,1394,8,149,1,150,1,150,1,150,3,150,1399,8,150,1,151,1,151,
1,151,1,151,1,151,1,151,1,151,1,151,3,151,1409,8,151,1,152,1,152,1,152,1,
152,1,152,3,152,1416,8,152,1,153,1,153,1,153,1,153,1,153,3,153,1423,8,153,
1,154,1,154,1,154,1,154,1,154,3,154,1430,8,154,1,155,1,155,1,155,1,155,1,
155,1,155,5,155,1438,8,155,10,155,12,155,1441,9,155,1,156,1,156,1,156,1,
156,1,156,1,156,1,156,1,156,1,156,3,156,1452,8,156,1,157,1,157,1,157,3,157,
1457,8,157,1,158,1,158,3,158,1461,8,158,1,159,1,159,1,160,1,160,1,161,1,
161,1,162,1,162,3,162,1471,8,162,1,163,1,163,1,164,1,164,1,165,1,165,1,165,
1,165,1,165,1,165,1,165,3,165,1484,8,165,1,166,1,166,1,167,1,167,1,168,1,
168,1,169,1,169,1,170,1,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,
174,3,174,1504,8,174,1,175,1,175,3,175,1508,8,175,1,176,1,176,1,177,1,177,
1,178,1,178,1,179,1,179,1,180,1,180,1,181,1,181,1,182,1,182,1,183,1,183,
1,184,1,184,1,185,1,185,3,185,1530,8,185,1,186,1,186,1,187,1,187,3,187,1536,
8,187,1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,1547,8,
189,1,190,1,190,1,190,1,190,1,190,3,190,1554,8,190,1,191,1,191,3,191,1558,
8,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,193,1,193,1,194,
1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,195,1,195,1,196,1,196,1,196,
3,196,1583,8,196,1,197,1,197,1,197,1,197,1,197,1,198,1,198,1,198,3,198,1593,
8,198,1,199,1,199,1,199,1,199,1,199,1,200,1,200,1,201,1,201,1,201,1,201,
1,201,1,201,1,201,1,201,1,202,1,202,1,203,1,203,1,203,1,203,1,203,3,203,
1617,8,203,1,204,1,204,1,204,5,204,1622,8,204,10,204,12,204,1625,9,204,1,
205,1,205,1,205,1,206,1,206,1,206,3,206,1633,8,206,1,207,1,207,1,207,3,207,
1638,8,207,1,208,1,208,1,209,1,209,1,209,1,209,1,209,1,210,1,210,1,210,1,
210,1,210,1,210,1,210,1,210,3,210,1655,8,210,1,211,1,211,1,211,1,211,1,211,
3,211,1662,8,211,1,212,1,212,1,212,1,212,1,212,3,212,1669,8,212,1,213,1,
213,1,214,1,214,1,214,1,214,1,214,1,214,3,214,1679,8,214,1,215,1,215,1,215,
1,215,1,215,1,215,3,215,1687,8,215,1,216,1,216,1,216,1,216,1,216,1,217,1,
217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,
217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,1714,8,217,1,218,1,218,1,218,
1,218,1,218,3,218,1721,8,218,1,219,1,219,1,219,1,219,1,219,3,219,1728,8,
219,1,220,1,220,3,220,1732,8,220,1,221,1,221,1,222,1,222,1,223,1,223,1,224,
1,224,1,225,1,225,1,226,1,226,1,226,0,11,34,36,38,108,110,128,130,208,258,
260,310,227,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,
310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,
382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,
418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,
0,7,2,0,19,19,29,29,1,0,30,32,3,0,27,27,34,34,76,76,2,0,10,10,71,71,1,0,
45,49,2,0,65,65,70,70,3,0,77,77,80,80,83,83,1720,0,457,1,0,0,0,2,464,1,0,
0,0,4,472,1,0,0,0,6,474,1,0,0,0,8,483,1,0,0,0,10,485,1,0,0,0,12,494,1,0,
0,0,14,503,1,0,0,0,16,512,1,0,0,0,18,521,1,0,0,0,20,535,1,0,0,0,22,541,1,
0,0,0,24,546,1,0,0,0,26,554,1,0,0,0,28,559,1,0,0,0,30,561,1,0,0,0,32,568,
1,0,0,0,34,570,1,0,0,0,36,583,1,0,0,0,38,596,1,0,0,0,40,612,1,0,0,0,42,616,
1,0,0,0,44,625,1,0,0,0,46,627,1,0,0,0,48,630,1,0,0,0,50,641,1,0,0,0,52,643,
1,0,0,0,54,649,1,0,0,0,56,651,1,0,0,0,58,654,1,0,0,0,60,662,1,0,0,0,62,666,
1,0,0,0,64,676,1,0,0,0,66,680,1,0,0,0,68,682,1,0,0,0,70,686,1,0,0,0,72,688,
1,0,0,0,74,701,1,0,0,0,76,708,1,0,0,0,78,715,1,0,0,0,80,717,1,0,0,0,82,726,
1,0,0,0,84,734,1,0,0,0,86,741,1,0,0,0,88,748,1,0,0,0,90,765,1,0,0,0,92,767,
1,0,0,0,94,774,1,0,0,0,96,784,1,0,0,0,98,789,1,0,0,0,100,791,1,0,0,0,102,
793,1,0,0,0,104,798,1,0,0,0,106,808,1,0,0,0,108,810,1,0,0,0,110,823,1,0,
0,0,112,836,1,0,0,0,114,840,1,0,0,0,116,844,1,0,0,0,118,851,1,0,0,0,120,
859,1,0,0,0,122,863,1,0,0,0,124,865,1,0,0,0,126,871,1,0,0,0,128,873,1,0,
0,0,130,886,1,0,0,0,132,902,1,0,0,0,134,906,1,0,0,0,136,915,1,0,0,0,138,
917,1,0,0,0,140,919,1,0,0,0,142,931,1,0,0,0,144,935,1,0,0,0,146,937,1,0,
0,0,148,943,1,0,0,0,150,945,1,0,0,0,152,948,1,0,0,0,154,955,1,0,0,0,156,
963,1,0,0,0,158,965,1,0,0,0,160,975,1,0,0,0,162,977,1,0,0,0,164,987,1,0,
0,0,166,989,1,0,0,0,168,1002,1,0,0,0,170,1009,1,0,0,0,172,1016,1,0,0,0,174,
1018,1,0,0,0,176,1024,1,0,0,0,178,1031,1,0,0,0,180,1033,1,0,0,0,182,1042,
1,0,0,0,184,1052,1,0,0,0,186,1059,1,0,0,0,188,1066,1,0,0,0,190,1076,1,0,
0,0,192,1080,1,0,0,0,194,1088,1,0,0,0,196,1090,1,0,0,0,198,1103,1,0,0,0,
200,1110,1,0,0,0,202,1125,1,0,0,0,204,1132,1,0,0,0,206,1134,1,0,0,0,208,
1138,1,0,0,0,210,1151,1,0,0,0,212,1160,1,0,0,0,214,1162,1,0,0,0,216,1166,
1,0,0,0,218,1170,1,0,0,0,220,1184,1,0,0,0,222,1191,1,0,0,0,224,1195,1,0,
0,0,226,1197,1,0,0,0,228,1209,1,0,0,0,230,1216,1,0,0,0,232,1220,1,0,0,0,
234,1222,1,0,0,0,236,1224,1,0,0,0,238,1226,1,0,0,0,240,1235,1,0,0,0,242,
1239,1,0,0,0,244,1243,1,0,0,0,246,1245,1,0,0,0,248,1254,1,0,0,0,250,1259,
1,0,0,0,252,1263,1,0,0,0,254,1265,1,0,0,0,256,1271,1,0,0,0,258,1273,1,0,
0,0,260,1286,1,0,0,0,262,1303,1,0,0,0,264,1305,1,0,0,0,266,1311,1,0,0,0,
268,1319,1,0,0,0,270,1321,1,0,0,0,272,1333,1,0,0,0,274,1338,1,0,0,0,276,
1340,1,0,0,0,278,1344,1,0,0,0,280,1346,1,0,0,0,282,1348,1,0,0,0,284,1352,
1,0,0,0,286,1360,1,0,0,0,288,1364,1,0,0,0,290,1366,1,0,0,0,292,1374,1,0,
0,0,294,1382,1,0,0,0,296,1389,1,0,0,0,298,1393,1,0,0,0,300,1398,1,0,0,0,
302,1408,1,0,0,0,304,1415,1,0,0,0,306,1422,1,0,0,0,308,1429,1,0,0,0,310,
1431,1,0,0,0,312,1451,1,0,0,0,314,1456,1,0,0,0,316,1460,1,0,0,0,318,1462,
1,0,0,0,320,1464,1,0,0,0,322,1466,1,0,0,0,324,1470,1,0,0,0,326,1472,1,0,
0,0,328,1474,1,0,0,0,330,1483,1,0,0,0,332,1485,1,0,0,0,334,1487,1,0,0,0,
336,1489,1,0,0,0,338,1491,1,0,0,0,340,1493,1,0,0,0,342,1495,1,0,0,0,344,
1497,1,0,0,0,346,1499,1,0,0,0,348,1503,1,0,0,0,350,1507,1,0,0,0,352,1509,
1,0,0,0,354,1511,1,0,0,0,356,1513,1,0,0,0,358,1515,1,0,0,0,360,1517,1,0,
0,0,362,1519,1,0,0,0,364,1521,1,0,0,0,366,1523,1,0,0,0,368,1525,1,0,0,0,
370,1529,1,0,0,0,372,1531,1,0,0,0,374,1535,1,0,0,0,376,1537,1,0,0,0,378,
1546,1,0,0,0,380,1553,1,0,0,0,382,1557,1,0,0,0,384,1559,1,0,0,0,386,1567,
1,0,0,0,388,1569,1,0,0,0,390,1577,1,0,0,0,392,1582,1,0,0,0,394,1584,1,0,
0,0,396,1592,1,0,0,0,398,1594,1,0,0,0,400,1599,1,0,0,0,402,1601,1,0,0,0,
404,1609,1,0,0,0,406,1616,1,0,0,0,408,1618,1,0,0,0,410,1626,1,0,0,0,412,
1632,1,0,0,0,414,1637,1,0,0,0,416,1639,1,0,0,0,418,1641,1,0,0,0,420,1654,
1,0,0,0,422,1661,1,0,0,0,424,1668,1,0,0,0,426,1670,1,0,0,0,428,1678,1,0,
0,0,430,1686,1,0,0,0,432,1688,1,0,0,0,434,1713,1,0,0,0,436,1720,1,0,0,0,
438,1727,1,0,0,0,440,1731,1,0,0,0,442,1733,1,0,0,0,444,1735,1,0,0,0,446,
1737,1,0,0,0,448,1739,1,0,0,0,450,1741,1,0,0,0,452,1743,1,0,0,0,454,456,
3,2,1,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,
458,460,1,0,0,0,459,457,1,0,0,0,460,461,5,0,0,1,461,1,1,0,0,0,462,465,3,
4,2,0,463,465,3,418,209,0,464,462,1,0,0,0,464,463,1,0,0,0,465,3,1,0,0,0,
466,473,3,10,5,0,467,473,3,12,6,0,468,473,3,14,7,0,469,473,3,16,8,0,470,
473,3,18,9,0,471,473,3,6,3,0,472,466,1,0,0,0,472,467,1,0,0,0,472,468,1,0,
0,0,472,469,1,0,0,0,472,470,1,0,0,0,472,471,1,0,0,0,473,5,1,0,0,0,474,475,
5,1,0,0,475,476,3,440,220,0,476,477,5,2,0,0,477,478,3,22,11,0,478,479,5,
2,0,0,479,480,3,8,4,0,480,481,3,20,10,0,481,482,5,3,0,0,482,7,1,0,0,0,483,
484,3,248,124,0,484,9,1,0,0,0,485,486,5,4,0,0,486,487,3,440,220,0,487,488,
5,2,0,0,488,489,3,22,11,0,489,490,5,2,0,0,490,491,3,24,12,0,491,492,3,20,
10,0,492,493,5,3,0,0,493,11,1,0,0,0,494,495,5,5,0,0,495,496,3,440,220,0,
496,497,5,2,0,0,497,498,3,22,11,0,498,499,5,2,0,0,499,500,3,118,59,0,500,
501,3,20,10,0,501,502,5,3,0,0,502,13,1,0,0,0,503,504,5,6,0,0,504,505,3,440,
220,0,505,506,5,2,0,0,506,507,3,22,11,0,507,508,5,2,0,0,508,509,3,242,121,
0,509,510,3,20,10,0,510,511,5,3,0,0,511,15,1,0,0,0,512,513,5,7,0,0,513,514,
3,440,220,0,514,515,5,2,0,0,515,516,3,22,11,0,516,517,5,2,0,0,517,518,3,
248,124,0,518,519,3,20,10,0,519,520,5,3,0,0,520,17,1,0,0,0,521,522,5,8,0,
0,522,523,3,440,220,0,523,524,5,2,0,0,524,525,3,22,11,0,525,526,5,2,0,0,
526,527,3,308,154,0,527,528,3,20,10,0,528,529,5,3,0,0,529,19,1,0,0,0,530,
531,5,2,0,0,531,532,3,378,189,0,532,533,3,414,207,0,533,536,1,0,0,0,534,
536,3,452,226,0,535,530,1,0,0,0,535,534,1,0,0,0,536,21,1,0,0,0,537,542,5,
70,0,0,538,539,5,70,0,0,539,540,5,9,0,0,540,542,3,428,214,0,541,537,1,0,
0,0,541,538,1,0,0,0,542,23,1,0,0,0,543,547,3,26,13,0,544,547,3,96,48,0,545,
547,3,112,56,0,546,543,1,0,0,0,546,544,1,0,0,0,546,545,1,0,0,0,547,25,1,
0,0,0,548,555,3,44,22,0,549,555,3,54,27,0,550,555,3,28,14,0,551,555,3,68,
34,0,552,555,3,114,57,0,553,555,3,116,58,0,554,548,1,0,0,0,554,549,1,0,0,
0,554,550,1,0,0,0,554,551,1,0,0,0,554,552,1,0,0,0,554,553,1,0,0,0,555,27,
1,0,0,0,556,560,3,30,15,0,557,560,3,32,16,0,558,560,3,104,52,0,559,556,1,
0,0,0,559,557,1,0,0,0,559,558,1,0,0,0,560,29,1,0,0,0,561,562,3,40,20,0,562,
563,3,330,165,0,563,564,3,40,20,0,564,31,1,0,0,0,565,569,3,34,17,0,566,569,
3,36,18,0,567,569,3,38,19,0,568,565,1,0,0,0,568,566,1,0,0,0,568,567,1,0,
0,0,569,33,1,0,0,0,570,571,6,17,-1,0,571,572,3,40,20,0,572,573,5,71,0,0,
573,574,3,40,20,0,574,580,1,0,0,0,575,576,10,1,0,0,576,577,5,71,0,0,577,
579,3,40,20,0,578,575,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,
0,0,0,581,35,1,0,0,0,582,580,1,0,0,0,583,584,6,18,-1,0,584,585,3,40,20,0,
585,586,5,10,0,0,586,587,3,40,20,0,587,593,1,0,0,0,588,589,10,1,0,0,589,
590,5,10,0,0,590,592,3,40,20,0,591,588,1,0,0,0,592,595,1,0,0,0,593,591,1,
0,0,0,593,594,1,0,0,0,594,37,1,0,0,0,595,593,1,0,0,0,596,597,6,19,-1,0,597,
598,3,40,20,0,598,599,5,11,0,0,599,600,3,40,20,0,600,606,1,0,0,0,601,602,
10,1,0,0,602,603,5,11,0,0,603,605,3,40,20,0,604,601,1,0,0,0,605,608,1,0,
0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,39,1,0,0,0,608,606,1,0,0,0,609,613,
3,44,22,0,610,613,3,54,27,0,611,613,3,68,34,0,612,609,1,0,0,0,612,610,1,
0,0,0,612,611,1,0,0,0,613,41,1,0,0,0,614,617,3,44,22,0,615,617,3,56,28,0,
616,614,1,0,0,0,616,615,1,0,0,0,617,43,1,0,0,0,618,626,3,46,23,0,619,626,
3,60,30,0,620,626,3,376,188,0,621,622,5,12,0,0,622,623,3,26,13,0,623,624,
5,13,0,0,624,626,1,0,0,0,625,618,1,0,0,0,625,619,1,0,0,0,625,620,1,0,0,0,
625,621,1,0,0,0,626,45,1,0,0,0,627,628,3,48,24,0,628,629,3,40,20,0,629,47,
1,0,0,0,630,631,3,314,157,0,631,632,5,14,0,0,632,633,3,50,25,0,633,634,5,
15,0,0,634,635,5,16,0,0,635,49,1,0,0,0,636,642,3,52,26,0,637,638,3,52,26,
0,638,639,5,2,0,0,639,640,3,50,25,0,640,642,1,0,0,0,641,636,1,0,0,0,641,
637,1,0,0,0,642,51,1,0,0,0,643,644,3,376,188,0,644,645,5,16,0,0,645,646,
3,98,49,0,646,53,1,0,0,0,647,650,3,56,28,0,648,650,3,58,29,0,649,647,1,0,
0,0,649,648,1,0,0,0,650,55,1,0,0,0,651,652,3,316,158,0,652,653,3,42,21,0,
653,57,1,0,0,0,654,655,3,84,42,0,655,656,3,356,178,0,656,657,3,84,42,0,657,
59,1,0,0,0,658,663,3,62,31,0,659,663,3,64,32,0,660,663,3,70,35,0,661,663,
3,90,45,0,662,658,1,0,0,0,662,659,1,0,0,0,662,660,1,0,0,0,662,661,1,0,0,
0,663,61,1,0,0,0,664,667,3,358,179,0,665,667,3,88,44,0,666,664,1,0,0,0,666,
665,1,0,0,0,667,63,1,0,0,0,668,677,3,362,181,0,669,677,3,66,33,0,670,671,
5,12,0,0,671,672,3,86,43,0,672,673,5,13,0,0,673,677,1,0,0,0,674,677,3,220,
110,0,675,677,3,72,36,0,676,668,1,0,0,0,676,669,1,0,0,0,676,670,1,0,0,0,
676,674,1,0,0,0,676,675,1,0,0,0,677,65,1,0,0,0,678,681,3,374,187,0,679,681,
3,372,186,0,680,678,1,0,0,0,680,679,1,0,0,0,681,67,1,0,0,0,682,683,3,84,
42,0,683,684,3,352,176,0,684,685,3,84,42,0,685,69,1,0,0,0,686,687,3,366,
183,0,687,71,1,0,0,0,688,689,5,17,0,0,689,690,3,74,37,0,690,691,5,2,0,0,
691,692,3,78,39,0,692,693,5,2,0,0,693,694,3,26,13,0,694,695,5,13,0,0,695,
73,1,0,0,0,696,702,3,96,48,0,697,698,5,14,0,0,698,699,3,76,38,0,699,700,
5,15,0,0,700,702,1,0,0,0,701,696,1,0,0,0,701,697,1,0,0,0,702,75,1,0,0,0,
703,709,3,96,48,0,704,705,3,96,48,0,705,706,5,2,0,0,706,707,3,76,38,0,707,
709,1,0,0,0,708,703,1,0,0,0,708,704,1,0,0,0,709,77,1,0,0,0,710,716,3,80,
40,0,711,712,5,14,0,0,712,713,3,82,41,0,713,714,5,15,0,0,714,716,1,0,0,0,
715,710,1,0,0,0,715,711,1,0,0,0,716,79,1,0,0,0,717,718,3,26,13,0,718,719,
3,338,169,0,719,720,3,26,13,0,720,81,1,0,0,0,721,727,3,80,40,0,722,723,3,
80,40,0,723,724,5,2,0,0,724,725,3,82,41,0,725,727,1,0,0,0,726,721,1,0,0,
0,726,722,1,0,0,0,727,83,1,0,0,0,728,735,3,60,30,0,729,735,3,376,188,0,730,
731,5,12,0,0,731,732,3,26,13,0,732,733,5,13,0,0,733,735,1,0,0,0,734,728,
1,0,0,0,734,729,1,0,0,0,734,730,1,0,0,0,735,85,1,0,0,0,736,742,3,330,165,
0,737,742,3,332,166,0,738,742,3,354,177,0,739,742,3,356,178,0,740,742,3,
316,158,0,741,736,1,0,0,0,741,737,1,0,0,0,741,738,1,0,0,0,741,739,1,0,0,
0,741,740,1,0,0,0,742,87,1,0,0,0,743,749,5,18,0,0,744,745,5,14,0,0,745,746,
3,94,47,0,746,747,5,15,0,0,747,749,1,0,0,0,748,743,1,0,0,0,748,744,1,0,0,
0,749,89,1,0,0,0,750,751,3,360,180,0,751,752,5,12,0,0,752,753,3,92,46,0,
753,754,5,13,0,0,754,766,1,0,0,0,755,756,3,364,182,0,756,757,5,12,0,0,757,
758,3,92,46,0,758,759,5,13,0,0,759,766,1,0,0,0,760,761,3,368,184,0,761,762,
5,12,0,0,762,763,3,92,46,0,763,764,5,13,0,0,764,766,1,0,0,0,765,750,1,0,
0,0,765,755,1,0,0,0,765,760,1,0,0,0,766,91,1,0,0,0,767,768,3,94,47,0,768,
93,1,0,0,0,769,775,3,26,13,0,770,771,3,26,13,0,771,772,5,2,0,0,772,773,3,
94,47,0,773,775,1,0,0,0,774,769,1,0,0,0,774,770,1,0,0,0,775,95,1,0,0,0,776,
777,3,350,175,0,777,778,5,16,0,0,778,779,3,98,49,0,779,785,1,0,0,0,780,781,
5,12,0,0,781,782,3,96,48,0,782,783,5,13,0,0,783,785,1,0,0,0,784,776,1,0,
0,0,784,780,1,0,0,0,785,97,1,0,0,0,786,790,3,100,50,0,787,790,3,106,53,0,
788,790,3,102,51,0,789,786,1,0,0,0,789,787,1,0,0,0,789,788,1,0,0,0,790,99,
1,0,0,0,791,792,3,44,22,0,792,101,1,0,0,0,793,794,3,38,19,0,794,103,1,0,
0,0,795,799,3,106,53,0,796,799,3,108,54,0,797,799,3,110,55,0,798,795,1,0,
0,0,798,796,1,0,0,0,798,797,1,0,0,0,799,105,1,0,0,0,800,801,3,100,50,0,801,
802,5,74,0,0,802,803,3,100,50,0,803,809,1,0,0,0,804,805,3,100,50,0,805,806,
5,74,0,0,806,807,3,106,53,0,807,809,1,0,0,0,808,800,1,0,0,0,808,804,1,0,
0,0,809,107,1,0,0,0,810,811,6,54,-1,0,811,812,3,100,50,0,812,813,5,72,0,
0,813,814,3,100,50,0,814,820,1,0,0,0,815,816,10,1,0,0,816,817,5,72,0,0,817,
819,3,100,50,0,818,815,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,1,
0,0,0,821,109,1,0,0,0,822,820,1,0,0,0,823,824,6,55,-1,0,824,825,3,100,50,
0,825,826,5,73,0,0,826,827,3,100,50,0,827,833,1,0,0,0,828,829,10,1,0,0,829,
830,5,73,0,0,830,832,3,100,50,0,831,828,1,0,0,0,832,835,1,0,0,0,833,831,
1,0,0,0,833,834,1,0,0,0,834,111,1,0,0,0,835,833,1,0,0,0,836,837,3,350,175,
0,837,838,3,322,161,0,838,839,3,348,174,0,839,113,1,0,0,0,840,841,3,60,30,
0,841,842,3,340,170,0,842,843,3,26,13,0,843,115,1,0,0,0,844,845,3,88,44,
0,845,846,3,336,168,0,846,847,3,88,44,0,847,117,1,0,0,0,848,852,3,120,60,
0,849,852,3,190,95,0,850,852,3,214,107,0,851,848,1,0,0,0,851,849,1,0,0,0,
851,850,1,0,0,0,852,119,1,0,0,0,853,860,3,136,68,0,854,860,3,148,74,0,855,
860,3,122,61,0,856,860,3,162,81,0,857,860,3,216,108,0,858,860,3,218,109,
0,859,853,1,0,0,0,859,854,1,0,0,0,859,855,1,0,0,0,859,856,1,0,0,0,859,857,
1,0,0,0,859,858,1,0,0,0,860,121,1,0,0,0,861,864,3,124,62,0,862,864,3,126,
63,0,863,861,1,0,0,0,863,862,1,0,0,0,864,123,1,0,0,0,865,866,3,132,66,0,
866,867,3,330,165,0,867,868,3,132,66,0,868,125,1,0,0,0,869,872,3,128,64,
0,870,872,3,130,65,0,871,869,1,0,0,0,871,870,1,0,0,0,872,127,1,0,0,0,873,
874,6,64,-1,0,874,875,3,132,66,0,875,876,5,71,0,0,876,877,3,132,66,0,877,
883,1,0,0,0,878,879,10,1,0,0,879,880,5,71,0,0,880,882,3,132,66,0,881,878,
1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,129,1,0,0,0,
885,883,1,0,0,0,886,887,6,65,-1,0,887,888,3,132,66,0,888,889,5,10,0,0,889,
890,3,132,66,0,890,896,1,0,0,0,891,892,10,1,0,0,892,893,5,10,0,0,893,895,
3,132,66,0,894,891,1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,
0,897,131,1,0,0,0,898,896,1,0,0,0,899,903,3,136,68,0,900,903,3,148,74,0,
901,903,3,162,81,0,902,899,1,0,0,0,902,900,1,0,0,0,902,901,1,0,0,0,903,133,
1,0,0,0,904,907,3,136,68,0,905,907,3,150,75,0,906,904,1,0,0,0,906,905,1,
0,0,0,907,135,1,0,0,0,908,916,3,140,70,0,909,916,3,154,77,0,910,916,3,138,
69,0,911,912,5,12,0,0,912,913,3,120,60,0,913,914,5,13,0,0,914,916,1,0,0,
0,915,908,1,0,0,0,915,909,1,0,0,0,915,910,1,0,0,0,915,911,1,0,0,0,916,137,
1,0,0,0,917,918,3,376,188,0,918,139,1,0,0,0,919,920,3,326,163,0,920,921,
5,14,0,0,921,922,3,142,71,0,922,923,5,15,0,0,923,924,5,16,0,0,924,925,3,
132,66,0,925,141,1,0,0,0,926,932,3,144,72,0,927,928,3,144,72,0,928,929,5,
2,0,0,929,930,3,142,71,0,930,932,1,0,0,0,931,926,1,0,0,0,931,927,1,0,0,0,
932,143,1,0,0,0,933,936,3,146,73,0,934,936,3,376,188,0,935,933,1,0,0,0,935,
934,1,0,0,0,936,145,1,0,0,0,937,938,3,376,188,0,938,939,5,16,0,0,939,940,
3,202,101,0,940,147,1,0,0,0,941,944,3,150,75,0,942,944,3,152,76,0,943,941,
1,0,0,0,943,942,1,0,0,0,944,149,1,0,0,0,945,946,3,324,162,0,946,947,3,134,
67,0,947,151,1,0,0,0,948,949,3,184,92,0,949,950,3,356,178,0,950,951,3,184,
92,0,951,153,1,0,0,0,952,956,3,156,78,0,953,956,3,158,79,0,954,956,3,164,
82,0,955,952,1,0,0,0,955,953,1,0,0,0,955,954,1,0,0,0,956,155,1,0,0,0,957,
964,3,358,179,0,958,959,3,360,180,0,959,960,5,12,0,0,960,961,3,188,94,0,
961,962,5,13,0,0,962,964,1,0,0,0,963,957,1,0,0,0,963,958,1,0,0,0,964,157,
1,0,0,0,965,966,3,160,80,0,966,159,1,0,0,0,967,976,3,362,181,0,968,969,3,
364,182,0,969,970,5,12,0,0,970,971,3,188,94,0,971,972,5,13,0,0,972,976,1,
0,0,0,973,976,3,180,90,0,974,976,3,166,83,0,975,967,1,0,0,0,975,968,1,0,
0,0,975,973,1,0,0,0,975,974,1,0,0,0,976,161,1,0,0,0,977,978,3,184,92,0,978,
979,3,352,176,0,979,980,3,184,92,0,980,163,1,0,0,0,981,988,3,366,183,0,982,
983,3,368,184,0,983,984,5,12,0,0,984,985,3,188,94,0,985,986,5,13,0,0,986,
988,1,0,0,0,987,981,1,0,0,0,987,982,1,0,0,0,988,165,1,0,0,0,989,990,5,17,
0,0,990,991,3,168,84,0,991,992,5,2,0,0,992,993,3,172,86,0,993,994,5,2,0,
0,994,995,3,182,91,0,995,996,5,13,0,0,996,167,1,0,0,0,997,1003,3,190,95,
0,998,999,5,14,0,0,999,1000,3,170,85,0,1000,1001,5,15,0,0,1001,1003,1,0,
0,0,1002,997,1,0,0,0,1002,998,1,0,0,0,1003,169,1,0,0,0,1004,1010,3,190,95,
0,1005,1006,3,190,95,0,1006,1007,5,2,0,0,1007,1008,3,170,85,0,1008,1010,
1,0,0,0,1009,1004,1,0,0,0,1009,1005,1,0,0,0,1010,171,1,0,0,0,1011,1017,3,
174,87,0,1012,1013,5,14,0,0,1013,1014,3,178,89,0,1014,1015,5,15,0,0,1015,
1017,1,0,0,0,1016,1011,1,0,0,0,1016,1012,1,0,0,0,1017,173,1,0,0,0,1018,1019,
3,176,88,0,1019,1020,3,338,169,0,1020,1021,3,182,91,0,1021,175,1,0,0,0,1022,
1025,3,156,78,0,1023,1025,3,186,93,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,
1025,177,1,0,0,0,1026,1032,3,174,87,0,1027,1028,3,174,87,0,1028,1029,5,2,
0,0,1029,1030,3,178,89,0,1030,1032,1,0,0,0,1031,1026,1,0,0,0,1031,1027,1,
0,0,0,1032,179,1,0,0,0,1033,1034,3,228,114,0,1034,1035,5,11,0,0,1035,1036,
5,12,0,0,1036,1037,3,188,94,0,1037,1038,5,13,0,0,1038,181,1,0,0,0,1039,1043,
3,120,60,0,1040,1043,3,374,187,0,1041,1043,3,186,93,0,1042,1039,1,0,0,0,
1042,1040,1,0,0,0,1042,1041,1,0,0,0,1043,183,1,0,0,0,1044,1053,3,154,77,
0,1045,1053,3,374,187,0,1046,1053,3,186,93,0,1047,1053,3,376,188,0,1048,
1049,5,12,0,0,1049,1050,3,120,60,0,1050,1051,5,13,0,0,1051,1053,1,0,0,0,
1052,1044,1,0,0,0,1052,1045,1,0,0,0,1052,1046,1,0,0,0,1052,1047,1,0,0,0,
1052,1048,1,0,0,0,1053,185,1,0,0,0,1054,1060,5,18,0,0,1055,1056,5,14,0,0,
1056,1057,3,188,94,0,1057,1058,5,15,0,0,1058,1060,1,0,0,0,1059,1054,1,0,
0,0,1059,1055,1,0,0,0,1060,187,1,0,0,0,1061,1067,3,182,91,0,1062,1063,3,
182,91,0,1063,1064,5,2,0,0,1064,1065,3,188,94,0,1065,1067,1,0,0,0,1066,1061,
1,0,0,0,1066,1062,1,0,0,0,1067,189,1,0,0,0,1068,1069,3,350,175,0,1069,1070,
5,16,0,0,1070,1071,3,192,96,0,1071,1077,1,0,0,0,1072,1073,5,12,0,0,1073,
1074,3,190,95,0,1074,1075,5,13,0,0,1075,1077,1,0,0,0,1076,1068,1,0,0,0,1076,
1072,1,0,0,0,1077,191,1,0,0,0,1078,1081,3,202,101,0,1079,1081,3,194,97,0,
1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,193,1,0,0,0,1082,1089,3,206,103,
0,1083,1089,3,196,98,0,1084,1085,5,12,0,0,1085,1086,3,194,97,0,1086,1087,
5,13,0,0,1087,1089,1,0,0,0,1088,1082,1,0,0,0,1088,1083,1,0,0,0,1088,1084,
1,0,0,0,1089,195,1,0,0,0,1090,1091,5,19,0,0,1091,1092,5,14,0,0,1092,1093,
3,142,71,0,1093,1094,5,15,0,0,1094,1095,5,16,0,0,1095,1096,3,198,99,0,1096,
197,1,0,0,0,1097,1104,3,202,101,0,1098,1099,5,12,0,0,1099,1100,3,206,103,
0,1100,1101,5,13,0,0,1101,1104,1,0,0,0,1102,1104,3,196,98,0,1103,1097,1,
0,0,0,1103,1098,1,0,0,0,1103,1102,1,0,0,0,1104,199,1,0,0,0,1105,1111,3,202,
101,0,1106,1107,5,12,0,0,1107,1108,3,208,104,0,1108,1109,5,13,0,0,1109,1111,
1,0,0,0,1110,1105,1,0,0,0,1110,1106,1,0,0,0,1111,201,1,0,0,0,1112,1126,3,
342,171,0,1113,1126,3,346,173,0,1114,1126,3,376,188,0,1115,1116,3,344,172,
0,1116,1117,5,12,0,0,1117,1118,3,204,102,0,1118,1119,5,13,0,0,1119,1126,
1,0,0,0,1120,1121,5,12,0,0,1121,1122,3,202,101,0,1122,1123,5,13,0,0,1123,
1126,1,0,0,0,1124,1126,3,210,105,0,1125,1112,1,0,0,0,1125,1113,1,0,0,0,1125,
1114,1,0,0,0,1125,1115,1,0,0,0,1125,1120,1,0,0,0,1125,1124,1,0,0,0,1126,
203,1,0,0,0,1127,1133,3,202,101,0,1128,1129,3,202,101,0,1129,1130,5,2,0,
0,1130,1131,3,204,102,0,1131,1133,1,0,0,0,1132,1127,1,0,0,0,1132,1128,1,
0,0,0,1133,205,1,0,0,0,1134,1135,3,200,100,0,1135,1136,5,74,0,0,1136,1137,
3,202,101,0,1137,207,1,0,0,0,1138,1139,6,104,-1,0,1139,1140,3,200,100,0,
1140,1141,5,72,0,0,1141,1142,3,202,101,0,1142,1148,1,0,0,0,1143,1144,10,
1,0,0,1144,1145,5,72,0,0,1145,1147,3,202,101,0,1146,1143,1,0,0,0,1147,1150,
1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,209,1,0,0,0,1150,1148,1,
0,0,0,1151,1152,5,14,0,0,1152,1153,3,212,106,0,1153,1154,5,15,0,0,1154,211,
1,0,0,0,1155,1161,3,192,96,0,1156,1157,3,192,96,0,1157,1158,5,2,0,0,1158,
1159,3,212,106,0,1159,1161,1,0,0,0,1160,1155,1,0,0,0,1160,1156,1,0,0,0,1161,
213,1,0,0,0,1162,1163,3,350,175,0,1163,1164,3,322,161,0,1164,1165,3,348,
174,0,1165,215,1,0,0,0,1166,1167,3,154,77,0,1167,1168,3,340,170,0,1168,1169,
3,182,91,0,1169,217,1,0,0,0,1170,1171,3,186,93,0,1171,1172,3,336,168,0,1172,
1173,3,186,93,0,1173,219,1,0,0,0,1174,1175,5,20,0,0,1175,1176,3,236,118,
0,1176,1177,5,21,0,0,1177,1185,1,0,0,0,1178,1179,5,20,0,0,1179,1180,3,236,
118,0,1180,1181,5,12,0,0,1181,1182,3,222,111,0,1182,1183,5,22,0,0,1183,1185,
1,0,0,0,1184,1174,1,0,0,0,1184,1178,1,0,0,0,1185,221,1,0,0,0,1186,1192,3,
224,112,0,1187,1188,3,224,112,0,1188,1189,5,2,0,0,1189,1190,3,222,111,0,
1190,1192,1,0,0,0,1191,1186,1,0,0,0,1191,1187,1,0,0,0,1192,223,1,0,0,0,1193,
1196,3,238,119,0,1194,1196,3,226,113,0,1195,1193,1,0,0,0,1195,1194,1,0,0,
0,1196,225,1,0,0,0,1197,1198,3,114,57,0,1198,227,1,0,0,0,1199,1200,5,20,
0,0,1200,1201,3,236,118,0,1201,1202,5,21,0,0,1202,1210,1,0,0,0,1203,1204,
5,20,0,0,1204,1205,3,236,118,0,1205,1206,5,12,0,0,1206,1207,3,230,115,0,
1207,1208,5,22,0,0,1208,1210,1,0,0,0,1209,1199,1,0,0,0,1209,1203,1,0,0,0,
1210,229,1,0,0,0,1211,1217,3,232,116,0,1212,1213,3,232,116,0,1213,1214,5,
2,0,0,1214,1215,3,230,115,0,1215,1217,1,0,0,0,1216,1211,1,0,0,0,1216,1212,
1,0,0,0,1217,231,1,0,0,0,1218,1221,3,238,119,0,1219,1221,3,234,117,0,1220,
1218,1,0,0,0,1220,1219,1,0,0,0,1221,233,1,0,0,0,1222,1223,3,216,108,0,1223,
235,1,0,0,0,1224,1225,3,370,185,0,1225,237,1,0,0,0,1226,1227,5,76,0,0,1227,
1228,3,184,92,0,1228,239,1,0,0,0,1229,1236,5,23,0,0,1230,1231,5,75,0,0,1231,
1232,5,24,0,0,1232,1236,5,74,0,0,1233,1236,5,25,0,0,1234,1236,5,26,0,0,1235,
1229,1,0,0,0,1235,1230,1,0,0,0,1235,1233,1,0,0,0,1235,1234,1,0,0,0,1236,
241,1,0,0,0,1237,1240,3,244,122,0,1238,1240,3,190,95,0,1239,1237,1,0,0,0,
1239,1238,1,0,0,0,1240,243,1,0,0,0,1241,1244,3,246,123,0,1242,1244,3,308,
154,0,1243,1241,1,0,0,0,1243,1242,1,0,0,0,1244,245,1,0,0,0,1245,1246,5,27,
0,0,1246,1247,5,14,0,0,1247,1248,3,142,71,0,1248,1249,5,15,0,0,1249,1250,
5,16,0,0,1250,1251,3,244,122,0,1251,247,1,0,0,0,1252,1255,3,250,125,0,1253,
1255,3,302,151,0,1254,1252,1,0,0,0,1254,1253,1,0,0,0,1255,249,1,0,0,0,1256,
1260,3,252,126,0,1257,1260,3,262,131,0,1258,1260,3,268,134,0,1259,1256,1,
0,0,0,1259,1257,1,0,0,0,1259,1258,1,0,0,0,1260,251,1,0,0,0,1261,1264,3,254,
127,0,1262,1264,3,256,128,0,1263,1261,1,0,0,0,1263,1262,1,0,0,0,1264,253,
1,0,0,0,1265,1266,3,266,133,0,1266,1267,3,330,165,0,1267,1268,3,266,133,
0,1268,255,1,0,0,0,1269,1272,3,258,129,0,1270,1272,3,260,130,0,1271,1269,
1,0,0,0,1271,1270,1,0,0,0,1272,257,1,0,0,0,1273,1274,6,129,-1,0,1274,1275,
3,266,133,0,1275,1276,5,71,0,0,1276,1277,3,266,133,0,1277,1283,1,0,0,0,1278,
1279,10,1,0,0,1279,1280,5,71,0,0,1280,1282,3,266,133,0,1281,1278,1,0,0,0,
1282,1285,1,0,0,0,1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,259,1,0,0,0,1285,
1283,1,0,0,0,1286,1287,6,130,-1,0,1287,1288,3,266,133,0,1288,1289,5,10,0,
0,1289,1290,3,266,133,0,1290,1296,1,0,0,0,1291,1292,10,1,0,0,1292,1293,5,
10,0,0,1293,1295,3,266,133,0,1294,1291,1,0,0,0,1295,1298,1,0,0,0,1296,1294,
1,0,0,0,1296,1297,1,0,0,0,1297,261,1,0,0,0,1298,1296,1,0,0,0,1299,1300,3,
334,167,0,1300,1301,3,266,133,0,1301,1304,1,0,0,0,1302,1304,3,264,132,0,
1303,1299,1,0,0,0,1303,1302,1,0,0,0,1304,263,1,0,0,0,1305,1306,3,298,149,
0,1306,1307,3,356,178,0,1307,1308,3,298,149,0,1308,265,1,0,0,0,1309,1312,
3,268,134,0,1310,1312,3,262,131,0,1311,1309,1,0,0,0,1311,1310,1,0,0,0,1312,
267,1,0,0,0,1313,1320,3,270,135,0,1314,1320,3,274,137,0,1315,1316,5,12,0,
0,1316,1317,3,250,125,0,1317,1318,5,13,0,0,1318,1320,1,0,0,0,1319,1313,1,
0,0,0,1319,1314,1,0,0,0,1319,1315,1,0,0,0,1320,269,1,0,0,0,1321,1322,3,328,
164,0,1322,1323,5,14,0,0,1323,1324,3,272,136,0,1324,1325,5,15,0,0,1325,1326,
5,16,0,0,1326,1327,3,266,133,0,1327,271,1,0,0,0,1328,1334,3,376,188,0,1329,
1330,3,376,188,0,1330,1331,5,2,0,0,1331,1332,3,272,136,0,1332,1334,1,0,0,
0,1333,1328,1,0,0,0,1333,1329,1,0,0,0,1334,273,1,0,0,0,1335,1339,3,276,138,
0,1336,1339,3,278,139,0,1337,1339,3,284,142,0,1338,1335,1,0,0,0,1338,1336,
1,0,0,0,1338,1337,1,0,0,0,1339,275,1,0,0,0,1340,1341,3,286,143,0,1341,277,
1,0,0,0,1342,1345,3,280,140,0,1343,1345,3,282,141,0,1344,1342,1,0,0,0,1344,
1343,1,0,0,0,1345,279,1,0,0,0,1346,1347,3,292,146,0,1347,281,1,0,0,0,1348,
1349,3,298,149,0,1349,1350,3,352,176,0,1350,1351,3,298,149,0,1351,283,1,
0,0,0,1352,1353,3,294,147,0,1353,285,1,0,0,0,1354,1361,3,358,179,0,1355,
1356,3,360,180,0,1356,1357,5,12,0,0,1357,1358,3,296,148,0,1358,1359,5,13,
0,0,1359,1361,1,0,0,0,1360,1354,1,0,0,0,1360,1355,1,0,0,0,1361,287,1,0,0,
0,1362,1365,3,374,187,0,1363,1365,3,290,145,0,1364,1362,1,0,0,0,1364,1363,
1,0,0,0,1365,289,1,0,0,0,1366,1367,3,292,146,0,1367,291,1,0,0,0,1368,1375,
3,362,181,0,1369,1370,3,364,182,0,1370,1371,5,12,0,0,1371,1372,3,296,148,
0,1372,1373,5,13,0,0,1373,1375,1,0,0,0,1374,1368,1,0,0,0,1374,1369,1,0,0,
0,1375,293,1,0,0,0,1376,1383,3,366,183,0,1377,1378,3,368,184,0,1378,1379,
5,12,0,0,1379,1380,3,296,148,0,1380,1381,5,13,0,0,1381,1383,1,0,0,0,1382,
1376,1,0,0,0,1382,1377,1,0,0,0,1383,295,1,0,0,0,1384,1390,3,298,149,0,1385,
1386,3,298,149,0,1386,1387,5,2,0,0,1387,1388,3,296,148,0,1388,1390,1,0,0,
0,1389,1384,1,0,0,0,1389,1385,1,0,0,0,1390,297,1,0,0,0,1391,1394,3,300,150,
0,1392,1394,3,376,188,0,1393,1391,1,0,0,0,1393,1392,1,0,0,0,1394,299,1,0,
0,0,1395,1399,3,286,143,0,1396,1399,3,288,144,0,1397,1399,3,294,147,0,1398,
1395,1,0,0,0,1398,1396,1,0,0,0,1398,1397,1,0,0,0,1399,301,1,0,0,0,1400,1401,
3,304,152,0,1401,1402,3,336,168,0,1402,1403,3,304,152,0,1403,1409,1,0,0,
0,1404,1405,5,12,0,0,1405,1406,3,302,151,0,1406,1407,5,13,0,0,1407,1409,
1,0,0,0,1408,1400,1,0,0,0,1408,1404,1,0,0,0,1409,303,1,0,0,0,1410,1416,5,
18,0,0,1411,1412,5,14,0,0,1412,1413,3,306,153,0,1413,1414,5,15,0,0,1414,
1416,1,0,0,0,1415,1410,1,0,0,0,1415,1411,1,0,0,0,1416,305,1,0,0,0,1417,1423,
3,250,125,0,1418,1419,3,250,125,0,1419,1420,5,2,0,0,1420,1421,3,306,153,
0,1421,1423,1,0,0,0,1422,1417,1,0,0,0,1422,1418,1,0,0,0,1423,307,1,0,0,0,
1424,1430,3,310,155,0,1425,1426,5,12,0,0,1426,1427,3,308,154,0,1427,1428,
5,13,0,0,1428,1430,1,0,0,0,1429,1424,1,0,0,0,1429,1425,1,0,0,0,1430,309,
1,0,0,0,1431,1432,6,155,-1,0,1432,1433,3,312,156,0,1433,1439,1,0,0,0,1434,
1435,10,1,0,0,1435,1436,5,71,0,0,1436,1438,3,312,156,0,1437,1434,1,0,0,0,
1438,1441,1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,0,0,0,1440,311,1,0,0,0,1441,
1439,1,0,0,0,1442,1452,3,274,137,0,1443,1444,5,28,0,0,1444,1452,3,274,137,
0,1445,1446,5,28,0,0,1446,1447,5,12,0,0,1447,1448,3,274,137,0,1448,1449,
5,13,0,0,1449,1452,1,0,0,0,1450,1452,3,264,132,0,1451,1442,1,0,0,0,1451,
1443,1,0,0,0,1451,1445,1,0,0,0,1451,1450,1,0,0,0,1452,313,1,0,0,0,1453,1457,
3,328,164,0,1454,1457,3,320,160,0,1455,1457,3,318,159,0,1456,1453,1,0,0,
0,1456,1454,1,0,0,0,1456,1455,1,0,0,0,1457,315,1,0,0,0,1458,1461,3,334,167,
0,1459,1461,3,240,120,0,1460,1458,1,0,0,0,1460,1459,1,0,0,0,1461,317,1,0,
0,0,1462,1463,7,0,0,0,1463,319,1,0,0,0,1464,1465,7,1,0,0,1465,321,1,0,0,
0,1466,1467,5,33,0,0,1467,323,1,0,0,0,1468,1471,3,334,167,0,1469,1471,3,
240,120,0,1470,1468,1,0,0,0,1470,1469,1,0,0,0,1471,325,1,0,0,0,1472,1473,
3,328,164,0,1473,327,1,0,0,0,1474,1475,7,2,0,0,1475,329,1,0,0,0,1476,1484,
5,35,0,0,1477,1484,5,36,0,0,1478,1484,5,37,0,0,1479,1484,5,38,0,0,1480,1481,
5,28,0,0,1481,1484,5,71,0,0,1482,1484,5,39,0,0,1483,1476,1,0,0,0,1483,1477,
1,0,0,0,1483,1478,1,0,0,0,1483,1479,1,0,0,0,1483,1480,1,0,0,0,1483,1482,
1,0,0,0,1484,331,1,0,0,0,1485,1486,7,3,0,0,1486,333,1,0,0,0,1487,1488,5,
28,0,0,1488,335,1,0,0,0,1489,1490,5,40,0,0,1490,337,1,0,0,0,1491,1492,5,
41,0,0,1492,339,1,0,0,0,1493,1494,5,42,0,0,1494,341,1,0,0,0,1495,1496,3,
344,172,0,1496,343,1,0,0,0,1497,1498,3,442,221,0,1498,345,1,0,0,0,1499,1500,
3,444,222,0,1500,347,1,0,0,0,1501,1504,3,350,175,0,1502,1504,3,362,181,0,
1503,1501,1,0,0,0,1503,1502,1,0,0,0,1504,349,1,0,0,0,1505,1508,3,358,179,
0,1506,1508,3,366,183,0,1507,1505,1,0,0,0,1507,1506,1,0,0,0,1508,351,1,0,
0,0,1509,1510,3,354,177,0,1510,353,1,0,0,0,1511,1512,5,43,0,0,1512,355,1,
0,0,0,1513,1514,5,44,0,0,1514,357,1,0,0,0,1515,1516,3,360,180,0,1516,359,
1,0,0,0,1517,1518,3,442,221,0,1518,361,1,0,0,0,1519,1520,3,364,182,0,1520,
363,1,0,0,0,1521,1522,3,444,222,0,1522,365,1,0,0,0,1523,1524,3,368,184,0,
1524,367,1,0,0,0,1525,1526,3,446,223,0,1526,369,1,0,0,0,1527,1530,3,362,
181,0,1528,1530,3,366,183,0,1529,1527,1,0,0,0,1529,1528,1,0,0,0,1530,371,
1,0,0,0,1531,1532,7,4,0,0,1532,373,1,0,0,0,1533,1536,3,448,224,0,1534,1536,
5,66,0,0,1535,1533,1,0,0,0,1535,1534,1,0,0,0,1536,375,1,0,0,0,1537,1538,
5,69,0,0,1538,377,1,0,0,0,1539,1547,3,382,191,0,1540,1547,3,388,194,0,1541,
1547,3,392,196,0,1542,1543,5,14,0,0,1543,1544,3,380,190,0,1544,1545,5,15,
0,0,1545,1547,1,0,0,0,1546,1539,1,0,0,0,1546,1540,1,0,0,0,1546,1541,1,0,
0,0,1546,1542,1,0,0,0,1547,379,1,0,0,0,1548,1554,3,378,189,0,1549,1550,3,
378,189,0,1550,1551,5,2,0,0,1551,1552,3,380,190,0,1552,1554,1,0,0,0,1553,
1548,1,0,0,0,1553,1549,1,0,0,0,1554,381,1,0,0,0,1555,1558,3,440,220,0,1556,
1558,3,384,192,0,1557,1555,1,0,0,0,1557,1556,1,0,0,0,1558,383,1,0,0,0,1559,
1560,5,50,0,0,1560,1561,3,386,193,0,1561,1562,5,2,0,0,1562,1563,3,416,208,
0,1563,1564,5,2,0,0,1564,1565,3,406,203,0,1565,1566,5,13,0,0,1566,385,1,
0,0,0,1567,1568,3,442,221,0,1568,387,1,0,0,0,1569,1570,5,51,0,0,1570,1571,
3,390,195,0,1571,1572,5,2,0,0,1572,1573,3,416,208,0,1573,1574,5,2,0,0,1574,
1575,3,406,203,0,1575,1576,5,13,0,0,1576,389,1,0,0,0,1577,1578,3,442,221,
0,1578,391,1,0,0,0,1579,1583,3,394,197,0,1580,1583,3,398,199,0,1581,1583,
3,402,201,0,1582,1579,1,0,0,0,1582,1580,1,0,0,0,1582,1581,1,0,0,0,1583,393,
1,0,0,0,1584,1585,5,52,0,0,1585,1586,3,450,225,0,1586,1587,3,396,198,0,1587,
1588,5,13,0,0,1588,395,1,0,0,0,1589,1590,5,2,0,0,1590,1593,3,440,220,0,1591,
1593,3,452,226,0,1592,1589,1,0,0,0,1592,1591,1,0,0,0,1593,397,1,0,0,0,1594,
1595,5,53,0,0,1595,1596,3,400,200,0,1596,1597,3,414,207,0,1597,1598,5,13,
0,0,1598,399,1,0,0,0,1599,1600,3,442,221,0,1600,401,1,0,0,0,1601,1602,5,
54,0,0,1602,1603,3,404,202,0,1603,1604,5,2,0,0,1604,1605,3,416,208,0,1605,
1606,5,2,0,0,1606,1607,3,406,203,0,1607,1608,5,13,0,0,1608,403,1,0,0,0,1609,
1610,3,442,221,0,1610,405,1,0,0,0,1611,1617,5,18,0,0,1612,1613,5,14,0,0,
1613,1614,3,408,204,0,1614,1615,5,15,0,0,1615,1617,1,0,0,0,1616,1611,1,0,
0,0,1616,1612,1,0,0,0,1617,407,1,0,0,0,1618,1623,3,410,205,0,1619,1620,5,
2,0,0,1620,1622,3,410,205,0,1621,1619,1,0,0,0,1622,1625,1,0,0,0,1623,1621,
1,0,0,0,1623,1624,1,0,0,0,1624,409,1,0,0,0,1625,1623,1,0,0,0,1626,1627,3,
378,189,0,1627,1628,3,412,206,0,1628,411,1,0,0,0,1629,1630,5,16,0,0,1630,
1633,3,436,218,0,1631,1633,3,452,226,0,1632,1629,1,0,0,0,1632,1631,1,0,0,
0,1633,413,1,0,0,0,1634,1635,5,2,0,0,1635,1638,3,416,208,0,1636,1638,3,452,
226,0,1637,1634,1,0,0,0,1637,1636,1,0,0,0,1638,415,1,0,0,0,1639,1640,3,436,
218,0,1640,417,1,0,0,0,1641,1642,5,55,0,0,1642,1643,3,450,225,0,1643,1644,
3,420,210,0,1644,1645,5,3,0,0,1645,419,1,0,0,0,1646,1655,3,452,226,0,1647,
1648,5,2,0,0,1648,1655,3,422,211,0,1649,1650,5,2,0,0,1650,1651,3,422,211,
0,1651,1652,5,2,0,0,1652,1653,3,426,213,0,1653,1655,1,0,0,0,1654,1646,1,
0,0,0,1654,1647,1,0,0,0,1654,1649,1,0,0,0,1655,421,1,0,0,0,1656,1657,5,14,
0,0,1657,1658,3,424,212,0,1658,1659,5,15,0,0,1659,1662,1,0,0,0,1660,1662,
5,72,0,0,1661,1656,1,0,0,0,1661,1660,1,0,0,0,1662,423,1,0,0,0,1663,1669,
3,440,220,0,1664,1665,3,440,220,0,1665,1666,5,2,0,0,1666,1667,3,424,212,
0,1667,1669,1,0,0,0,1668,1663,1,0,0,0,1668,1664,1,0,0,0,1669,425,1,0,0,0,
1670,1671,3,440,220,0,1671,427,1,0,0,0,1672,1679,3,430,215,0,1673,1674,3,
430,215,0,1674,1675,5,16,0,0,1675,1676,3,428,214,0,1676,1679,1,0,0,0,1677,
1679,3,436,218,0,1678,1672,1,0,0,0,1678,1673,1,0,0,0,1678,1677,1,0,0,0,1679,
429,1,0,0,0,1680,1687,3,442,221,0,1681,1687,3,432,216,0,1682,1687,3,376,
188,0,1683,1687,3,448,224,0,1684,1687,5,66,0,0,1685,1687,3,434,217,0,1686,
1680,1,0,0,0,1686,1681,1,0,0,0,1686,1682,1,0,0,0,1686,1683,1,0,0,0,1686,
1684,1,0,0,0,1686,1685,1,0,0,0,1687,431,1,0,0,0,1688,1689,3,442,221,0,1689,
1690,5,12,0,0,1690,1691,3,438,219,0,1691,1692,5,13,0,0,1692,433,1,0,0,0,
1693,1694,5,56,0,0,1694,1695,3,24,12,0,1695,1696,5,13,0,0,1696,1714,1,0,
0,0,1697,1698,5,57,0,0,1698,1699,3,118,59,0,1699,1700,5,13,0,0,1700,1714,
1,0,0,0,1701,1702,5,58,0,0,1702,1703,3,248,124,0,1703,1704,5,13,0,0,1704,
1714,1,0,0,0,1705,1706,5,59,0,0,1706,1707,3,308,154,0,1707,1708,5,13,0,0,
1708,1714,1,0,0,0,1709,1710,5,60,0,0,1710,1711,3,298,149,0,1711,1712,5,13,
0,0,1712,1714,1,0,0,0,1713,1693,1,0,0,0,1713,1697,1,0,0,0,1713,1701,1,0,
0,0,1713,1705,1,0,0,0,1713,1709,1,0,0,0,1714,435,1,0,0,0,1715,1721,5,18,
0,0,1716,1717,5,14,0,0,1717,1718,3,438,219,0,1718,1719,5,15,0,0,1719,1721,
1,0,0,0,1720,1715,1,0,0,0,1720,1716,1,0,0,0,1721,437,1,0,0,0,1722,1728,3,
428,214,0,1723,1724,3,428,214,0,1724,1725,5,2,0,0,1725,1726,3,438,219,0,
1726,1728,1,0,0,0,1727,1722,1,0,0,0,1727,1723,1,0,0,0,1728,439,1,0,0,0,1729,
1732,3,442,221,0,1730,1732,5,83,0,0,1731,1729,1,0,0,0,1731,1730,1,0,0,0,
1732,441,1,0,0,0,1733,1734,7,5,0,0,1734,443,1,0,0,0,1735,1736,5,67,0,0,1736,
445,1,0,0,0,1737,1738,5,68,0,0,1738,447,1,0,0,0,1739,1740,7,6,0,0,1740,449,
1,0,0,0,1741,1742,3,442,221,0,1742,451,1,0,0,0,1743,1744,1,0,0,0,1744,453,
1,0,0,0,130,457,464,472,535,541,546,554,559,568,580,593,606,612,616,625,
641,649,662,666,676,680,701,708,715,726,734,741,748,765,774,784,789,798,
808,820,833,851,859,863,871,883,896,902,906,915,931,935,943,955,963,975,
987,1002,1009,1016,1024,1031,1042,1052,1059,1066,1076,1080,1088,1103,1110,
1125,1132,1148,1160,1184,1191,1195,1209,1216,1220,1235,1239,1243,1254,1259,
1263,1271,1283,1296,1303,1311,1319,1333,1338,1344,1360,1364,1374,1382,1389,
1393,1398,1408,1415,1422,1429,1439,1451,1456,1460,1470,1483,1503,1507,1529,
1535,1546,1553,1557,1582,1592,1616,1623,1632,1637,1654,1661,1668,1678,1686,
1713,1720,1727,1731];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class TPTPParser extends antlr4.Parser {

    static grammarFileName = "TPTP.g4";
    static literalNames = [ null, "'tpi('", "','", "').'", "'thf('", "'tff('", 
                            "'tcf('", "'fof('", "'cnf('", "'-'", "'&'", 
                            "'@'", "'('", "')'", "'['", "']'", "':'", "'$let('", 
                            "'[]'", "'!>'", "'{'", "'}'", "')}'", "'[.]'", 
                            "'.'", "'{.}'", "'(.)'", "'!'", "'~'", "'?*'", 
                            "'^'", "'@+'", "'@-'", "'<<'", "'?'", "'<=>'", 
                            "'=>'", "'<='", "'<~>'", "'~&'", "'-->'", "':='", 
                            "'=='", "'='", "'!='", "'!!'", "'??'", "'@@+'", 
                            "'@@-'", "'@='", "'inference('", "'introduced('", 
                            "'file('", "'theory('", "'creator('", "'include('", 
                            "'$thf('", "'$tff('", "'$fof('", "'$cnf('", 
                            "'$fot('", null, null, null, null, null, null, 
                            null, null, null, null, "'|'", "'*'", "'+'", 
                            "'>'", "'<'", "'#'", null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'''", null, null, "'\\\\'", null, null, 
                            null, "'.\\n'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, "WS", "Comment_line", 
                             "Comment_block", "Not_star_slash", "Single_quoted", 
                             "Distinct_object", "Dollar_word", "Dollar_dollar_word", 
                             "Upper_word", "Lower_word", "Vline", "Star", 
                             "Plus", "Arrow", "Less_sign", "Hash", "Real", 
                             "Signed_real", "Unsigned_real", "Rational", 
                             "Signed_rational", "Unsigned_rational", "Integer", 
                             "Signed_integer", "Unsigned_integer", "Decimal", 
                             "Positive_decimal", "Decimal_exponent", "Decimal_fraction", 
                             "Dot_decimal", "Exp_integer", "Signed_exp_integer", 
                             "Unsigned_exp_integer", "Slash", "Slosh", "Percentage_sign", 
                             "Double_quote", "Single_quote", "Dot", "Slash_char", 
                             "Slosh_char", "Zero_numeric", "Dollar", "Printable_char", 
                             "Viewable_char" ];
    static ruleNames = [ "tptp_file", "tptp_input", "annotated_formula", 
                         "tpi_annotated", "tpi_formula", "thf_annotated", 
                         "tff_annotated", "tcf_annotated", "fof_annotated", 
                         "cnf_annotated", "annotations", "formula_role", 
                         "thf_formula", "thf_logic_formula", "thf_binary_formula", 
                         "thf_binary_nonassoc", "thf_binary_assoc", "thf_or_formula", 
                         "thf_and_formula", "thf_apply_formula", "thf_unit_formula", 
                         "thf_preunit_formula", "thf_unitary_formula", "thf_quantified_formula", 
                         "thf_quantification", "thf_variable_list", "thf_typed_variable", 
                         "thf_unary_formula", "thf_prefix_unary", "thf_infix_unary", 
                         "thf_atomic_formula", "thf_plain_atomic", "thf_defined_atomic", 
                         "thf_defined_term", "thf_defined_infix", "thf_system_atomic", 
                         "thf_let", "thf_let_types", "thf_atom_typing_list", 
                         "thf_let_defns", "thf_let_defn", "thf_let_defn_list", 
                         "thf_unitary_term", "thf_conn_term", "thf_tuple", 
                         "thf_fof_function", "thf_arguments", "thf_formula_list", 
                         "thf_atom_typing", "thf_top_level_type", "thf_unitary_type", 
                         "thf_apply_type", "thf_binary_type", "thf_mapping_type", 
                         "thf_xprod_type", "thf_union_type", "thf_subtype", 
                         "thf_definition", "thf_sequent", "tff_formula", 
                         "tff_logic_formula", "tff_binary_formula", "tff_binary_nonassoc", 
                         "tff_binary_assoc", "tff_or_formula", "tff_and_formula", 
                         "tff_unit_formula", "tff_preunit_formula", "tff_unitary_formula", 
                         "txf_unitary_formula", "tff_quantified_formula", 
                         "tff_variable_list", "tff_variable", "tff_typed_variable", 
                         "tff_unary_formula", "tff_prefix_unary", "tff_infix_unary", 
                         "tff_atomic_formula", "tff_plain_atomic", "tff_defined_atomic", 
                         "tff_defined_plain", "tff_defined_infix", "tff_system_atomic", 
                         "txf_let", "txf_let_types", "tff_atom_typing_list", 
                         "txf_let_defns", "txf_let_defn", "txf_let_LHS", 
                         "txf_let_defn_list", "nxf_atom", "tff_term", "tff_unitary_term", 
                         "txf_tuple", "tff_arguments", "tff_atom_typing", 
                         "tff_top_level_type", "tff_non_atomic_type", "tf1_quantified_type", 
                         "tff_monotype", "tff_unitary_type", "tff_atomic_type", 
                         "tff_type_arguments", "tff_mapping_type", "tff_xprod_type", 
                         "txf_tuple_type", "tff_type_list", "tff_subtype", 
                         "txf_definition", "txf_sequent", "nhf_long_connective", 
                         "nhf_parameter_list", "nhf_parameter", "nhf_key_pair", 
                         "nxf_long_connective", "nxf_parameter_list", "nxf_parameter", 
                         "nxf_key_pair", "ntf_connective_name", "ntf_index", 
                         "ntf_short_connective", "tcf_formula", "tcf_logic_formula", 
                         "tcf_quantified_formula", "fof_formula", "fof_logic_formula", 
                         "fof_binary_formula", "fof_binary_nonassoc", "fof_binary_assoc", 
                         "fof_or_formula", "fof_and_formula", "fof_unary_formula", 
                         "fof_infix_unary", "fof_unit_formula", "fof_unitary_formula", 
                         "fof_quantified_formula", "fof_variable_list", 
                         "fof_atomic_formula", "fof_plain_atomic_formula", 
                         "fof_defined_atomic_formula", "fof_defined_plain_formula", 
                         "fof_defined_infix_formula", "fof_system_atomic_formula", 
                         "fof_plain_term", "fof_defined_term", "fof_defined_atomic_term", 
                         "fof_defined_plain_term", "fof_system_term", "fof_arguments", 
                         "fof_term", "fof_function_term", "fof_sequent", 
                         "fof_formula_tuple", "fof_formula_tuple_list", 
                         "cnf_formula", "cnf_disjunction", "cnf_literal", 
                         "thf_quantifier", "thf_unary_connective", "th1_quantifier", 
                         "th0_quantifier", "subtype_sign", "tff_unary_connective", 
                         "tff_quantifier", "fof_quantifier", "nonassoc_connective", 
                         "assoc_connective", "unary_connective", "gentzen_arrow", 
                         "assignment", "identical", "type_constant", "type_functor", 
                         "defined_type", "atom", "untyped_atom", "defined_infix_pred", 
                         "infix_equality", "infix_inequality", "constant", 
                         "functor", "defined_constant", "defined_functor", 
                         "system_constant", "system_functor", "def_or_sys_constant", 
                         "th1_defined_term", "defined_term", "variable", 
                         "source", "sources", "dag_source", "inference_record", 
                         "inference_rule", "internal_source", "intro_type", 
                         "external_source", "file_source", "file_info", 
                         "theory", "theory_name", "creator_source", "creator_name", 
                         "parents", "parent_list", "parent_info", "parent_details", 
                         "optional_info", "useful_info", "include", "include_optionals", 
                         "formula_selection", "name_list", "space_name", 
                         "general_term", "general_data", "general_function", 
                         "formula_data", "general_list", "general_terms", 
                         "name", "atomic_word", "atomic_defined_word", "atomic_system_word", 
                         "number", "file_name", "null" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = TPTPParser.ruleNames;
        this.literalNames = TPTPParser.literalNames;
        this.symbolicNames = TPTPParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 17:
    	    		return this.thf_or_formula_sempred(localctx, predIndex);
    	case 18:
    	    		return this.thf_and_formula_sempred(localctx, predIndex);
    	case 19:
    	    		return this.thf_apply_formula_sempred(localctx, predIndex);
    	case 54:
    	    		return this.thf_xprod_type_sempred(localctx, predIndex);
    	case 55:
    	    		return this.thf_union_type_sempred(localctx, predIndex);
    	case 64:
    	    		return this.tff_or_formula_sempred(localctx, predIndex);
    	case 65:
    	    		return this.tff_and_formula_sempred(localctx, predIndex);
    	case 104:
    	    		return this.tff_xprod_type_sempred(localctx, predIndex);
    	case 129:
    	    		return this.fof_or_formula_sempred(localctx, predIndex);
    	case 130:
    	    		return this.fof_and_formula_sempred(localctx, predIndex);
    	case 155:
    	    		return this.cnf_disjunction_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    thf_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_apply_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_xprod_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_union_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_xprod_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fof_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fof_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    cnf_disjunction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	tptp_file() {
	    let localctx = new Tptp_fileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, TPTPParser.RULE_tptp_file);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 498) !== 0) || _la===55) {
	            this.state = 454;
	            this.tptp_input();
	            this.state = 459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 460;
	        this.match(TPTPParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tptp_input() {
	    let localctx = new Tptp_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, TPTPParser.RULE_tptp_input);
	    try {
	        this.state = 464;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 462;
	            this.annotated_formula();
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 463;
	            this.include();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotated_formula() {
	    let localctx = new Annotated_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, TPTPParser.RULE_annotated_formula);
	    try {
	        this.state = 472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 466;
	            this.thf_annotated();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 467;
	            this.tff_annotated();
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 468;
	            this.tcf_annotated();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 469;
	            this.fof_annotated();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 470;
	            this.cnf_annotated();
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 471;
	            this.tpi_annotated();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tpi_annotated() {
	    let localctx = new Tpi_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, TPTPParser.RULE_tpi_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        this.match(TPTPParser.T__0);
	        this.state = 475;
	        this.name();
	        this.state = 476;
	        this.match(TPTPParser.T__1);
	        this.state = 477;
	        this.formula_role();
	        this.state = 478;
	        this.match(TPTPParser.T__1);
	        this.state = 479;
	        this.tpi_formula();
	        this.state = 480;
	        this.annotations();
	        this.state = 481;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tpi_formula() {
	    let localctx = new Tpi_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, TPTPParser.RULE_tpi_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this.fof_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_annotated() {
	    let localctx = new Thf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, TPTPParser.RULE_thf_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.match(TPTPParser.T__3);
	        this.state = 486;
	        this.name();
	        this.state = 487;
	        this.match(TPTPParser.T__1);
	        this.state = 488;
	        this.formula_role();
	        this.state = 489;
	        this.match(TPTPParser.T__1);
	        this.state = 490;
	        this.thf_formula();
	        this.state = 491;
	        this.annotations();
	        this.state = 492;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_annotated() {
	    let localctx = new Tff_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, TPTPParser.RULE_tff_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this.match(TPTPParser.T__4);
	        this.state = 495;
	        this.name();
	        this.state = 496;
	        this.match(TPTPParser.T__1);
	        this.state = 497;
	        this.formula_role();
	        this.state = 498;
	        this.match(TPTPParser.T__1);
	        this.state = 499;
	        this.tff_formula();
	        this.state = 500;
	        this.annotations();
	        this.state = 501;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_annotated() {
	    let localctx = new Tcf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, TPTPParser.RULE_tcf_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(TPTPParser.T__5);
	        this.state = 504;
	        this.name();
	        this.state = 505;
	        this.match(TPTPParser.T__1);
	        this.state = 506;
	        this.formula_role();
	        this.state = 507;
	        this.match(TPTPParser.T__1);
	        this.state = 508;
	        this.tcf_formula();
	        this.state = 509;
	        this.annotations();
	        this.state = 510;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_annotated() {
	    let localctx = new Fof_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, TPTPParser.RULE_fof_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(TPTPParser.T__6);
	        this.state = 513;
	        this.name();
	        this.state = 514;
	        this.match(TPTPParser.T__1);
	        this.state = 515;
	        this.formula_role();
	        this.state = 516;
	        this.match(TPTPParser.T__1);
	        this.state = 517;
	        this.fof_formula();
	        this.state = 518;
	        this.annotations();
	        this.state = 519;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cnf_annotated() {
	    let localctx = new Cnf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, TPTPParser.RULE_cnf_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.match(TPTPParser.T__7);
	        this.state = 522;
	        this.name();
	        this.state = 523;
	        this.match(TPTPParser.T__1);
	        this.state = 524;
	        this.formula_role();
	        this.state = 525;
	        this.match(TPTPParser.T__1);
	        this.state = 526;
	        this.cnf_formula();
	        this.state = 527;
	        this.annotations();
	        this.state = 528;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotations() {
	    let localctx = new AnnotationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, TPTPParser.RULE_annotations);
	    try {
	        this.state = 535;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 530;
	            this.match(TPTPParser.T__1);
	            this.state = 531;
	            this.source();
	            this.state = 532;
	            this.optional_info();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 534;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_role() {
	    let localctx = new Formula_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, TPTPParser.RULE_formula_role);
	    try {
	        this.state = 541;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 537;
	            this.match(TPTPParser.Lower_word);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 538;
	            this.match(TPTPParser.Lower_word);
	            this.state = 539;
	            this.match(TPTPParser.T__8);
	            this.state = 540;
	            this.general_term();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_formula() {
	    let localctx = new Thf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, TPTPParser.RULE_thf_formula);
	    try {
	        this.state = 546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 543;
	            this.thf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 544;
	            this.thf_atom_typing();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 545;
	            this.thf_subtype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_logic_formula() {
	    let localctx = new Thf_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, TPTPParser.RULE_thf_logic_formula);
	    try {
	        this.state = 554;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 548;
	            this.thf_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 549;
	            this.thf_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 550;
	            this.thf_binary_formula();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 551;
	            this.thf_defined_infix();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 552;
	            this.thf_definition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 553;
	            this.thf_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_formula() {
	    let localctx = new Thf_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, TPTPParser.RULE_thf_binary_formula);
	    try {
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 556;
	            this.thf_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 557;
	            this.thf_binary_assoc();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 558;
	            this.thf_binary_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_nonassoc() {
	    let localctx = new Thf_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, TPTPParser.RULE_thf_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.thf_unit_formula();
	        this.state = 562;
	        this.nonassoc_connective();
	        this.state = 563;
	        this.thf_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_assoc() {
	    let localctx = new Thf_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, TPTPParser.RULE_thf_binary_assoc);
	    try {
	        this.state = 568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 565;
	            this.thf_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 566;
	            this.thf_and_formula(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 567;
	            this.thf_apply_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	thf_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 34;
	    this.enterRecursionRule(localctx, 34, TPTPParser.RULE_thf_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 571;
	        this.thf_unit_formula();
	        this.state = 572;
	        this.match(TPTPParser.Vline);
	        this.state = 573;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 580;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_or_formula);
	                this.state = 575;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 576;
	                this.match(TPTPParser.Vline);
	                this.state = 577;
	                this.thf_unit_formula(); 
	            }
	            this.state = 582;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 36;
	    this.enterRecursionRule(localctx, 36, TPTPParser.RULE_thf_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.thf_unit_formula();
	        this.state = 585;
	        this.match(TPTPParser.T__9);
	        this.state = 586;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 593;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_and_formula);
	                this.state = 588;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 589;
	                this.match(TPTPParser.T__9);
	                this.state = 590;
	                this.thf_unit_formula(); 
	            }
	            this.state = 595;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_apply_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_apply_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 38;
	    this.enterRecursionRule(localctx, 38, TPTPParser.RULE_thf_apply_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 597;
	        this.thf_unit_formula();
	        this.state = 598;
	        this.match(TPTPParser.T__10);
	        this.state = 599;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 606;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_apply_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_apply_formula);
	                this.state = 601;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 602;
	                this.match(TPTPParser.T__10);
	                this.state = 603;
	                this.thf_unit_formula(); 
	            }
	            this.state = 608;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	thf_unit_formula() {
	    let localctx = new Thf_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, TPTPParser.RULE_thf_unit_formula);
	    try {
	        this.state = 612;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 609;
	            this.thf_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 610;
	            this.thf_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 611;
	            this.thf_defined_infix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_preunit_formula() {
	    let localctx = new Thf_preunit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, TPTPParser.RULE_thf_preunit_formula);
	    try {
	        this.state = 616;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 27:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 76:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 614;
	            this.thf_unitary_formula();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 615;
	            this.thf_prefix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_formula() {
	    let localctx = new Thf_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, TPTPParser.RULE_thf_unitary_formula);
	    try {
	        this.state = 625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 618;
	            this.thf_quantified_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 619;
	            this.thf_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 620;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 621;
	            this.match(TPTPParser.T__11);
	            this.state = 622;
	            this.thf_logic_formula();
	            this.state = 623;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantified_formula() {
	    let localctx = new Thf_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, TPTPParser.RULE_thf_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 627;
	        this.thf_quantification();
	        this.state = 628;
	        this.thf_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantification() {
	    let localctx = new Thf_quantificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, TPTPParser.RULE_thf_quantification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.thf_quantifier();
	        this.state = 631;
	        this.match(TPTPParser.T__13);
	        this.state = 632;
	        this.thf_variable_list();
	        this.state = 633;
	        this.match(TPTPParser.T__14);
	        this.state = 634;
	        this.match(TPTPParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_variable_list() {
	    let localctx = new Thf_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, TPTPParser.RULE_thf_variable_list);
	    try {
	        this.state = 641;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 636;
	            this.thf_typed_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 637;
	            this.thf_typed_variable();
	            this.state = 638;
	            this.match(TPTPParser.T__1);
	            this.state = 639;
	            this.thf_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_typed_variable() {
	    let localctx = new Thf_typed_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, TPTPParser.RULE_thf_typed_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.variable();
	        this.state = 644;
	        this.match(TPTPParser.T__15);
	        this.state = 645;
	        this.thf_top_level_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unary_formula() {
	    let localctx = new Thf_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, TPTPParser.RULE_thf_unary_formula);
	    try {
	        this.state = 649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 75:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 647;
	            this.thf_prefix_unary();
	            break;
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 20:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 648;
	            this.thf_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_prefix_unary() {
	    let localctx = new Thf_prefix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, TPTPParser.RULE_thf_prefix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this.thf_unary_connective();
	        this.state = 652;
	        this.thf_preunit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_infix_unary() {
	    let localctx = new Thf_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, TPTPParser.RULE_thf_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.thf_unitary_term();
	        this.state = 655;
	        this.infix_inequality();
	        this.state = 656;
	        this.thf_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atomic_formula() {
	    let localctx = new Thf_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, TPTPParser.RULE_thf_atomic_formula);
	    try {
	        this.state = 662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 658;
	            this.thf_plain_atomic();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 659;
	            this.thf_defined_atomic();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 660;
	            this.thf_system_atomic();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 661;
	            this.thf_fof_function();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_plain_atomic() {
	    let localctx = new Thf_plain_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, TPTPParser.RULE_thf_plain_atomic);
	    try {
	        this.state = 666;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 664;
	            this.constant();
	            break;
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 665;
	            this.thf_tuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_atomic() {
	    let localctx = new Thf_defined_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, TPTPParser.RULE_thf_defined_atomic);
	    try {
	        this.state = 676;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 668;
	            this.defined_constant();
	            break;
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 66:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 669;
	            this.thf_defined_term();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 670;
	            this.match(TPTPParser.T__11);
	            this.state = 671;
	            this.thf_conn_term();
	            this.state = 672;
	            this.match(TPTPParser.T__12);
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 674;
	            this.nhf_long_connective();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 675;
	            this.thf_let();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_term() {
	    let localctx = new Thf_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, TPTPParser.RULE_thf_defined_term);
	    try {
	        this.state = 680;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 678;
	            this.defined_term();
	            break;
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 679;
	            this.th1_defined_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_infix() {
	    let localctx = new Thf_defined_infixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, TPTPParser.RULE_thf_defined_infix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.thf_unitary_term();
	        this.state = 683;
	        this.defined_infix_pred();
	        this.state = 684;
	        this.thf_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_system_atomic() {
	    let localctx = new Thf_system_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, TPTPParser.RULE_thf_system_atomic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 686;
	        this.system_constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let() {
	    let localctx = new Thf_letContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, TPTPParser.RULE_thf_let);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(TPTPParser.T__16);
	        this.state = 689;
	        this.thf_let_types();
	        this.state = 690;
	        this.match(TPTPParser.T__1);
	        this.state = 691;
	        this.thf_let_defns();
	        this.state = 692;
	        this.match(TPTPParser.T__1);
	        this.state = 693;
	        this.thf_logic_formula();
	        this.state = 694;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_types() {
	    let localctx = new Thf_let_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, TPTPParser.RULE_thf_let_types);
	    try {
	        this.state = 701;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 65:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 696;
	            this.thf_atom_typing();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 697;
	            this.match(TPTPParser.T__13);
	            this.state = 698;
	            this.thf_atom_typing_list();
	            this.state = 699;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atom_typing_list() {
	    let localctx = new Thf_atom_typing_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, TPTPParser.RULE_thf_atom_typing_list);
	    try {
	        this.state = 708;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 703;
	            this.thf_atom_typing();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 704;
	            this.thf_atom_typing();
	            this.state = 705;
	            this.match(TPTPParser.T__1);
	            this.state = 706;
	            this.thf_atom_typing_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defns() {
	    let localctx = new Thf_let_defnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, TPTPParser.RULE_thf_let_defns);
	    try {
	        this.state = 715;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 710;
	            this.thf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 711;
	            this.match(TPTPParser.T__13);
	            this.state = 712;
	            this.thf_let_defn_list();
	            this.state = 713;
	            this.match(TPTPParser.T__14);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defn() {
	    let localctx = new Thf_let_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, TPTPParser.RULE_thf_let_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.thf_logic_formula();
	        this.state = 718;
	        this.assignment();
	        this.state = 719;
	        this.thf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defn_list() {
	    let localctx = new Thf_let_defn_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, TPTPParser.RULE_thf_let_defn_list);
	    try {
	        this.state = 726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 721;
	            this.thf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 722;
	            this.thf_let_defn();
	            this.state = 723;
	            this.match(TPTPParser.T__1);
	            this.state = 724;
	            this.thf_let_defn_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_term() {
	    let localctx = new Thf_unitary_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, TPTPParser.RULE_thf_unitary_term);
	    try {
	        this.state = 734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 728;
	            this.thf_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 729;
	            this.variable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 730;
	            this.match(TPTPParser.T__11);
	            this.state = 731;
	            this.thf_logic_formula();
	            this.state = 732;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_conn_term() {
	    let localctx = new Thf_conn_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, TPTPParser.RULE_thf_conn_term);
	    try {
	        this.state = 741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 736;
	            this.nonassoc_connective();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 737;
	            this.assoc_connective();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 738;
	            this.infix_equality();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 739;
	            this.infix_inequality();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 740;
	            this.thf_unary_connective();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_tuple() {
	    let localctx = new Thf_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, TPTPParser.RULE_thf_tuple);
	    try {
	        this.state = 748;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 743;
	            this.match(TPTPParser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 744;
	            this.match(TPTPParser.T__13);
	            this.state = 745;
	            this.thf_formula_list();
	            this.state = 746;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_fof_function() {
	    let localctx = new Thf_fof_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, TPTPParser.RULE_thf_fof_function);
	    try {
	        this.state = 765;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 750;
	            this.functor();
	            this.state = 751;
	            this.match(TPTPParser.T__11);
	            this.state = 752;
	            this.thf_arguments();
	            this.state = 753;
	            this.match(TPTPParser.T__12);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 755;
	            this.defined_functor();
	            this.state = 756;
	            this.match(TPTPParser.T__11);
	            this.state = 757;
	            this.thf_arguments();
	            this.state = 758;
	            this.match(TPTPParser.T__12);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 760;
	            this.system_functor();
	            this.state = 761;
	            this.match(TPTPParser.T__11);
	            this.state = 762;
	            this.thf_arguments();
	            this.state = 763;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_arguments() {
	    let localctx = new Thf_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, TPTPParser.RULE_thf_arguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.thf_formula_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_formula_list() {
	    let localctx = new Thf_formula_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, TPTPParser.RULE_thf_formula_list);
	    try {
	        this.state = 774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 769;
	            this.thf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 770;
	            this.thf_logic_formula();
	            this.state = 771;
	            this.match(TPTPParser.T__1);
	            this.state = 772;
	            this.thf_formula_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atom_typing() {
	    let localctx = new Thf_atom_typingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, TPTPParser.RULE_thf_atom_typing);
	    try {
	        this.state = 784;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 776;
	            this.untyped_atom();
	            this.state = 777;
	            this.match(TPTPParser.T__15);
	            this.state = 778;
	            this.thf_top_level_type();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 780;
	            this.match(TPTPParser.T__11);
	            this.state = 781;
	            this.thf_atom_typing();
	            this.state = 782;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_top_level_type() {
	    let localctx = new Thf_top_level_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, TPTPParser.RULE_thf_top_level_type);
	    try {
	        this.state = 789;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 786;
	            this.thf_unitary_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 787;
	            this.thf_mapping_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 788;
	            this.thf_apply_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_type() {
	    let localctx = new Thf_unitary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, TPTPParser.RULE_thf_unitary_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.thf_unitary_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_apply_type() {
	    let localctx = new Thf_apply_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, TPTPParser.RULE_thf_apply_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.thf_apply_formula(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_type() {
	    let localctx = new Thf_binary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, TPTPParser.RULE_thf_binary_type);
	    try {
	        this.state = 798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 795;
	            this.thf_mapping_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 796;
	            this.thf_xprod_type(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 797;
	            this.thf_union_type(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_mapping_type() {
	    let localctx = new Thf_mapping_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, TPTPParser.RULE_thf_mapping_type);
	    try {
	        this.state = 808;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 800;
	            this.thf_unitary_type();
	            this.state = 801;
	            this.match(TPTPParser.Arrow);
	            this.state = 802;
	            this.thf_unitary_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 804;
	            this.thf_unitary_type();
	            this.state = 805;
	            this.match(TPTPParser.Arrow);
	            this.state = 806;
	            this.thf_mapping_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	thf_xprod_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_xprod_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 108;
	    this.enterRecursionRule(localctx, 108, TPTPParser.RULE_thf_xprod_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.thf_unitary_type();
	        this.state = 812;
	        this.match(TPTPParser.Star);
	        this.state = 813;
	        this.thf_unitary_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 820;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_xprod_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_xprod_type);
	                this.state = 815;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 816;
	                this.match(TPTPParser.Star);
	                this.state = 817;
	                this.thf_unitary_type(); 
	            }
	            this.state = 822;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_union_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_union_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 110;
	    this.enterRecursionRule(localctx, 110, TPTPParser.RULE_thf_union_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.thf_unitary_type();
	        this.state = 825;
	        this.match(TPTPParser.Plus);
	        this.state = 826;
	        this.thf_unitary_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 833;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_union_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_union_type);
	                this.state = 828;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 829;
	                this.match(TPTPParser.Plus);
	                this.state = 830;
	                this.thf_unitary_type(); 
	            }
	            this.state = 835;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	thf_subtype() {
	    let localctx = new Thf_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, TPTPParser.RULE_thf_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        this.untyped_atom();
	        this.state = 837;
	        this.subtype_sign();
	        this.state = 838;
	        this.atom();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_definition() {
	    let localctx = new Thf_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, TPTPParser.RULE_thf_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.thf_atomic_formula();
	        this.state = 841;
	        this.identical();
	        this.state = 842;
	        this.thf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_sequent() {
	    let localctx = new Thf_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, TPTPParser.RULE_thf_sequent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 844;
	        this.thf_tuple();
	        this.state = 845;
	        this.gentzen_arrow();
	        this.state = 846;
	        this.thf_tuple();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_formula() {
	    let localctx = new Tff_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, TPTPParser.RULE_tff_formula);
	    try {
	        this.state = 851;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 848;
	            this.tff_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 849;
	            this.tff_atom_typing();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 850;
	            this.tff_subtype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_logic_formula() {
	    let localctx = new Tff_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, TPTPParser.RULE_tff_logic_formula);
	    try {
	        this.state = 859;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 853;
	            this.tff_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 854;
	            this.tff_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 855;
	            this.tff_binary_formula();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 856;
	            this.tff_defined_infix();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 857;
	            this.txf_definition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 858;
	            this.txf_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_formula() {
	    let localctx = new Tff_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, TPTPParser.RULE_tff_binary_formula);
	    try {
	        this.state = 863;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 861;
	            this.tff_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 862;
	            this.tff_binary_assoc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_nonassoc() {
	    let localctx = new Tff_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, TPTPParser.RULE_tff_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        this.tff_unit_formula();
	        this.state = 866;
	        this.nonassoc_connective();
	        this.state = 867;
	        this.tff_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_assoc() {
	    let localctx = new Tff_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, TPTPParser.RULE_tff_binary_assoc);
	    try {
	        this.state = 871;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 869;
	            this.tff_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 870;
	            this.tff_and_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	tff_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 128;
	    this.enterRecursionRule(localctx, 128, TPTPParser.RULE_tff_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        this.tff_unit_formula();
	        this.state = 875;
	        this.match(TPTPParser.Vline);
	        this.state = 876;
	        this.tff_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 883;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_tff_or_formula);
	                this.state = 878;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 879;
	                this.match(TPTPParser.Vline);
	                this.state = 880;
	                this.tff_unit_formula(); 
	            }
	            this.state = 885;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	tff_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 130;
	    this.enterRecursionRule(localctx, 130, TPTPParser.RULE_tff_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 887;
	        this.tff_unit_formula();
	        this.state = 888;
	        this.match(TPTPParser.T__9);
	        this.state = 889;
	        this.tff_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 896;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_tff_and_formula);
	                this.state = 891;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 892;
	                this.match(TPTPParser.T__9);
	                this.state = 893;
	                this.tff_unit_formula(); 
	            }
	            this.state = 898;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	tff_unit_formula() {
	    let localctx = new Tff_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, TPTPParser.RULE_tff_unit_formula);
	    try {
	        this.state = 902;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 899;
	            this.tff_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 900;
	            this.tff_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 901;
	            this.tff_defined_infix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_preunit_formula() {
	    let localctx = new Tff_preunit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, TPTPParser.RULE_tff_preunit_formula);
	    try {
	        this.state = 906;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 17:
	        case 20:
	        case 27:
	        case 34:
	        case 65:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 904;
	            this.tff_unitary_formula();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 905;
	            this.tff_prefix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_formula() {
	    let localctx = new Tff_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, TPTPParser.RULE_tff_unitary_formula);
	    try {
	        this.state = 915;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 34:
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 908;
	            this.tff_quantified_formula();
	            break;
	        case 17:
	        case 20:
	        case 65:
	        case 67:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 909;
	            this.tff_atomic_formula();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 910;
	            this.txf_unitary_formula();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 911;
	            this.match(TPTPParser.T__11);
	            this.state = 912;
	            this.tff_logic_formula();
	            this.state = 913;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_unitary_formula() {
	    let localctx = new Txf_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, TPTPParser.RULE_txf_unitary_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 917;
	        this.variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_quantified_formula() {
	    let localctx = new Tff_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, TPTPParser.RULE_tff_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 919;
	        this.tff_quantifier();
	        this.state = 920;
	        this.match(TPTPParser.T__13);
	        this.state = 921;
	        this.tff_variable_list();
	        this.state = 922;
	        this.match(TPTPParser.T__14);
	        this.state = 923;
	        this.match(TPTPParser.T__15);
	        this.state = 924;
	        this.tff_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_variable_list() {
	    let localctx = new Tff_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, TPTPParser.RULE_tff_variable_list);
	    try {
	        this.state = 931;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 926;
	            this.tff_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 927;
	            this.tff_variable();
	            this.state = 928;
	            this.match(TPTPParser.T__1);
	            this.state = 929;
	            this.tff_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_variable() {
	    let localctx = new Tff_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, TPTPParser.RULE_tff_variable);
	    try {
	        this.state = 935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 933;
	            this.tff_typed_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 934;
	            this.variable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_typed_variable() {
	    let localctx = new Tff_typed_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, TPTPParser.RULE_tff_typed_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 937;
	        this.variable();
	        this.state = 938;
	        this.match(TPTPParser.T__15);
	        this.state = 939;
	        this.tff_atomic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unary_formula() {
	    let localctx = new Tff_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, TPTPParser.RULE_tff_unary_formula);
	    try {
	        this.state = 943;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 75:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 941;
	            this.tff_prefix_unary();
	            break;
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 20:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 942;
	            this.tff_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_prefix_unary() {
	    let localctx = new Tff_prefix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, TPTPParser.RULE_tff_prefix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        this.tff_unary_connective();
	        this.state = 946;
	        this.tff_preunit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_infix_unary() {
	    let localctx = new Tff_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, TPTPParser.RULE_tff_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 948;
	        this.tff_unitary_term();
	        this.state = 949;
	        this.infix_inequality();
	        this.state = 950;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atomic_formula() {
	    let localctx = new Tff_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, TPTPParser.RULE_tff_atomic_formula);
	    try {
	        this.state = 955;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 952;
	            this.tff_plain_atomic();
	            break;
	        case 17:
	        case 20:
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 953;
	            this.tff_defined_atomic();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 954;
	            this.tff_system_atomic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_plain_atomic() {
	    let localctx = new Tff_plain_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, TPTPParser.RULE_tff_plain_atomic);
	    try {
	        this.state = 963;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 957;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 958;
	            this.functor();
	            this.state = 959;
	            this.match(TPTPParser.T__11);
	            this.state = 960;
	            this.tff_arguments();
	            this.state = 961;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_atomic() {
	    let localctx = new Tff_defined_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, TPTPParser.RULE_tff_defined_atomic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        this.tff_defined_plain();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_plain() {
	    let localctx = new Tff_defined_plainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, TPTPParser.RULE_tff_defined_plain);
	    try {
	        this.state = 975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 967;
	            this.defined_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 968;
	            this.defined_functor();
	            this.state = 969;
	            this.match(TPTPParser.T__11);
	            this.state = 970;
	            this.tff_arguments();
	            this.state = 971;
	            this.match(TPTPParser.T__12);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 973;
	            this.nxf_atom();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 974;
	            this.txf_let();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_infix() {
	    let localctx = new Tff_defined_infixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, TPTPParser.RULE_tff_defined_infix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 977;
	        this.tff_unitary_term();
	        this.state = 978;
	        this.defined_infix_pred();
	        this.state = 979;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_system_atomic() {
	    let localctx = new Tff_system_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, TPTPParser.RULE_tff_system_atomic);
	    try {
	        this.state = 987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 981;
	            this.system_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 982;
	            this.system_functor();
	            this.state = 983;
	            this.match(TPTPParser.T__11);
	            this.state = 984;
	            this.tff_arguments();
	            this.state = 985;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let() {
	    let localctx = new Txf_letContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, TPTPParser.RULE_txf_let);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 989;
	        this.match(TPTPParser.T__16);
	        this.state = 990;
	        this.txf_let_types();
	        this.state = 991;
	        this.match(TPTPParser.T__1);
	        this.state = 992;
	        this.txf_let_defns();
	        this.state = 993;
	        this.match(TPTPParser.T__1);
	        this.state = 994;
	        this.tff_term();
	        this.state = 995;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_types() {
	    let localctx = new Txf_let_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, TPTPParser.RULE_txf_let_types);
	    try {
	        this.state = 1002;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 65:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 997;
	            this.tff_atom_typing();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 998;
	            this.match(TPTPParser.T__13);
	            this.state = 999;
	            this.tff_atom_typing_list();
	            this.state = 1000;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atom_typing_list() {
	    let localctx = new Tff_atom_typing_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, TPTPParser.RULE_tff_atom_typing_list);
	    try {
	        this.state = 1009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1004;
	            this.tff_atom_typing();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1005;
	            this.tff_atom_typing();
	            this.state = 1006;
	            this.match(TPTPParser.T__1);
	            this.state = 1007;
	            this.tff_atom_typing_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defns() {
	    let localctx = new Txf_let_defnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, TPTPParser.RULE_txf_let_defns);
	    try {
	        this.state = 1016;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1011;
	            this.txf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1012;
	            this.match(TPTPParser.T__13);
	            this.state = 1013;
	            this.txf_let_defn_list();
	            this.state = 1014;
	            this.match(TPTPParser.T__14);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defn() {
	    let localctx = new Txf_let_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, TPTPParser.RULE_txf_let_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1018;
	        this.txf_let_LHS();
	        this.state = 1019;
	        this.assignment();
	        this.state = 1020;
	        this.tff_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_LHS() {
	    let localctx = new Txf_let_LHSContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, TPTPParser.RULE_txf_let_LHS);
	    try {
	        this.state = 1024;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1022;
	            this.tff_plain_atomic();
	            break;
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1023;
	            this.txf_tuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defn_list() {
	    let localctx = new Txf_let_defn_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, TPTPParser.RULE_txf_let_defn_list);
	    try {
	        this.state = 1031;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1026;
	            this.txf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1027;
	            this.txf_let_defn();
	            this.state = 1028;
	            this.match(TPTPParser.T__1);
	            this.state = 1029;
	            this.txf_let_defn_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_atom() {
	    let localctx = new Nxf_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, TPTPParser.RULE_nxf_atom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1033;
	        this.nxf_long_connective();
	        this.state = 1034;
	        this.match(TPTPParser.T__10);
	        this.state = 1035;
	        this.match(TPTPParser.T__11);
	        this.state = 1036;
	        this.tff_arguments();
	        this.state = 1037;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_term() {
	    let localctx = new Tff_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, TPTPParser.RULE_tff_term);
	    try {
	        this.state = 1042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1039;
	            this.tff_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1040;
	            this.defined_term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1041;
	            this.txf_tuple();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_term() {
	    let localctx = new Tff_unitary_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, TPTPParser.RULE_tff_unitary_term);
	    try {
	        this.state = 1052;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	        case 20:
	        case 65:
	        case 67:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1044;
	            this.tff_atomic_formula();
	            break;
	        case 66:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1045;
	            this.defined_term();
	            break;
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1046;
	            this.txf_tuple();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1047;
	            this.variable();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1048;
	            this.match(TPTPParser.T__11);
	            this.state = 1049;
	            this.tff_logic_formula();
	            this.state = 1050;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_tuple() {
	    let localctx = new Txf_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, TPTPParser.RULE_txf_tuple);
	    try {
	        this.state = 1059;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1054;
	            this.match(TPTPParser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1055;
	            this.match(TPTPParser.T__13);
	            this.state = 1056;
	            this.tff_arguments();
	            this.state = 1057;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_arguments() {
	    let localctx = new Tff_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, TPTPParser.RULE_tff_arguments);
	    try {
	        this.state = 1066;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1061;
	            this.tff_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1062;
	            this.tff_term();
	            this.state = 1063;
	            this.match(TPTPParser.T__1);
	            this.state = 1064;
	            this.tff_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atom_typing() {
	    let localctx = new Tff_atom_typingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, TPTPParser.RULE_tff_atom_typing);
	    try {
	        this.state = 1076;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1068;
	            this.untyped_atom();
	            this.state = 1069;
	            this.match(TPTPParser.T__15);
	            this.state = 1070;
	            this.tff_top_level_type();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1072;
	            this.match(TPTPParser.T__11);
	            this.state = 1073;
	            this.tff_atom_typing();
	            this.state = 1074;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_top_level_type() {
	    let localctx = new Tff_top_level_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, TPTPParser.RULE_tff_top_level_type);
	    try {
	        this.state = 1080;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1078;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1079;
	            this.tff_non_atomic_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_non_atomic_type() {
	    let localctx = new Tff_non_atomic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, TPTPParser.RULE_tff_non_atomic_type);
	    try {
	        this.state = 1088;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1082;
	            this.tff_mapping_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1083;
	            this.tf1_quantified_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1084;
	            this.match(TPTPParser.T__11);
	            this.state = 1085;
	            this.tff_non_atomic_type();
	            this.state = 1086;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tf1_quantified_type() {
	    let localctx = new Tf1_quantified_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, TPTPParser.RULE_tf1_quantified_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this.match(TPTPParser.T__18);
	        this.state = 1091;
	        this.match(TPTPParser.T__13);
	        this.state = 1092;
	        this.tff_variable_list();
	        this.state = 1093;
	        this.match(TPTPParser.T__14);
	        this.state = 1094;
	        this.match(TPTPParser.T__15);
	        this.state = 1095;
	        this.tff_monotype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_monotype() {
	    let localctx = new Tff_monotypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, TPTPParser.RULE_tff_monotype);
	    try {
	        this.state = 1103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1097;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1098;
	            this.match(TPTPParser.T__11);
	            this.state = 1099;
	            this.tff_mapping_type();
	            this.state = 1100;
	            this.match(TPTPParser.T__12);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1102;
	            this.tf1_quantified_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_type() {
	    let localctx = new Tff_unitary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, TPTPParser.RULE_tff_unitary_type);
	    try {
	        this.state = 1110;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1105;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1106;
	            this.match(TPTPParser.T__11);
	            this.state = 1107;
	            this.tff_xprod_type(0);
	            this.state = 1108;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atomic_type() {
	    let localctx = new Tff_atomic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, TPTPParser.RULE_tff_atomic_type);
	    try {
	        this.state = 1125;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1112;
	            this.type_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1113;
	            this.defined_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1114;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1115;
	            this.type_functor();
	            this.state = 1116;
	            this.match(TPTPParser.T__11);
	            this.state = 1117;
	            this.tff_type_arguments();
	            this.state = 1118;
	            this.match(TPTPParser.T__12);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1120;
	            this.match(TPTPParser.T__11);
	            this.state = 1121;
	            this.tff_atomic_type();
	            this.state = 1122;
	            this.match(TPTPParser.T__12);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1124;
	            this.txf_tuple_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_type_arguments() {
	    let localctx = new Tff_type_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, TPTPParser.RULE_tff_type_arguments);
	    try {
	        this.state = 1132;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1127;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1128;
	            this.tff_atomic_type();
	            this.state = 1129;
	            this.match(TPTPParser.T__1);
	            this.state = 1130;
	            this.tff_type_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_mapping_type() {
	    let localctx = new Tff_mapping_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, TPTPParser.RULE_tff_mapping_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1134;
	        this.tff_unitary_type();
	        this.state = 1135;
	        this.match(TPTPParser.Arrow);
	        this.state = 1136;
	        this.tff_atomic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	tff_xprod_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_xprod_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 208;
	    this.enterRecursionRule(localctx, 208, TPTPParser.RULE_tff_xprod_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1139;
	        this.tff_unitary_type();
	        this.state = 1140;
	        this.match(TPTPParser.Star);
	        this.state = 1141;
	        this.tff_atomic_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1148;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_xprod_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_tff_xprod_type);
	                this.state = 1143;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1144;
	                this.match(TPTPParser.Star);
	                this.state = 1145;
	                this.tff_atomic_type(); 
	            }
	            this.state = 1150;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	txf_tuple_type() {
	    let localctx = new Txf_tuple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, TPTPParser.RULE_txf_tuple_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1151;
	        this.match(TPTPParser.T__13);
	        this.state = 1152;
	        this.tff_type_list();
	        this.state = 1153;
	        this.match(TPTPParser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_type_list() {
	    let localctx = new Tff_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, TPTPParser.RULE_tff_type_list);
	    try {
	        this.state = 1160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1155;
	            this.tff_top_level_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1156;
	            this.tff_top_level_type();
	            this.state = 1157;
	            this.match(TPTPParser.T__1);
	            this.state = 1158;
	            this.tff_type_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_subtype() {
	    let localctx = new Tff_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, TPTPParser.RULE_tff_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this.untyped_atom();
	        this.state = 1163;
	        this.subtype_sign();
	        this.state = 1164;
	        this.atom();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_definition() {
	    let localctx = new Txf_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, TPTPParser.RULE_txf_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1166;
	        this.tff_atomic_formula();
	        this.state = 1167;
	        this.identical();
	        this.state = 1168;
	        this.tff_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_sequent() {
	    let localctx = new Txf_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, TPTPParser.RULE_txf_sequent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1170;
	        this.txf_tuple();
	        this.state = 1171;
	        this.gentzen_arrow();
	        this.state = 1172;
	        this.txf_tuple();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_long_connective() {
	    let localctx = new Nhf_long_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, TPTPParser.RULE_nhf_long_connective);
	    try {
	        this.state = 1184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1174;
	            this.match(TPTPParser.T__19);
	            this.state = 1175;
	            this.ntf_connective_name();
	            this.state = 1176;
	            this.match(TPTPParser.T__20);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1178;
	            this.match(TPTPParser.T__19);
	            this.state = 1179;
	            this.ntf_connective_name();
	            this.state = 1180;
	            this.match(TPTPParser.T__11);
	            this.state = 1181;
	            this.nhf_parameter_list();
	            this.state = 1182;
	            this.match(TPTPParser.T__21);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_parameter_list() {
	    let localctx = new Nhf_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, TPTPParser.RULE_nhf_parameter_list);
	    try {
	        this.state = 1191;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1186;
	            this.nhf_parameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1187;
	            this.nhf_parameter();
	            this.state = 1188;
	            this.match(TPTPParser.T__1);
	            this.state = 1189;
	            this.nhf_parameter_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_parameter() {
	    let localctx = new Nhf_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, TPTPParser.RULE_nhf_parameter);
	    try {
	        this.state = 1195;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1193;
	            this.ntf_index();
	            break;
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 20:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1194;
	            this.nhf_key_pair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_key_pair() {
	    let localctx = new Nhf_key_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, TPTPParser.RULE_nhf_key_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1197;
	        this.thf_definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_long_connective() {
	    let localctx = new Nxf_long_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, TPTPParser.RULE_nxf_long_connective);
	    try {
	        this.state = 1209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1199;
	            this.match(TPTPParser.T__19);
	            this.state = 1200;
	            this.ntf_connective_name();
	            this.state = 1201;
	            this.match(TPTPParser.T__20);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1203;
	            this.match(TPTPParser.T__19);
	            this.state = 1204;
	            this.ntf_connective_name();
	            this.state = 1205;
	            this.match(TPTPParser.T__11);
	            this.state = 1206;
	            this.nxf_parameter_list();
	            this.state = 1207;
	            this.match(TPTPParser.T__21);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_parameter_list() {
	    let localctx = new Nxf_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, TPTPParser.RULE_nxf_parameter_list);
	    try {
	        this.state = 1216;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1211;
	            this.nxf_parameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1212;
	            this.nxf_parameter();
	            this.state = 1213;
	            this.match(TPTPParser.T__1);
	            this.state = 1214;
	            this.nxf_parameter_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_parameter() {
	    let localctx = new Nxf_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, TPTPParser.RULE_nxf_parameter);
	    try {
	        this.state = 1220;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1218;
	            this.ntf_index();
	            break;
	        case 17:
	        case 20:
	        case 65:
	        case 67:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1219;
	            this.nxf_key_pair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_key_pair() {
	    let localctx = new Nxf_key_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, TPTPParser.RULE_nxf_key_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1222;
	        this.txf_definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_connective_name() {
	    let localctx = new Ntf_connective_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, TPTPParser.RULE_ntf_connective_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1224;
	        this.def_or_sys_constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_index() {
	    let localctx = new Ntf_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, TPTPParser.RULE_ntf_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1226;
	        this.match(TPTPParser.Hash);
	        this.state = 1227;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_short_connective() {
	    let localctx = new Ntf_short_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, TPTPParser.RULE_ntf_short_connective);
	    try {
	        this.state = 1235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1229;
	            this.match(TPTPParser.T__22);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1230;
	            this.match(TPTPParser.Less_sign);
	            this.state = 1231;
	            this.match(TPTPParser.T__23);
	            this.state = 1232;
	            this.match(TPTPParser.Arrow);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1233;
	            this.match(TPTPParser.T__24);
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1234;
	            this.match(TPTPParser.T__25);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_formula() {
	    let localctx = new Tcf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, TPTPParser.RULE_tcf_formula);
	    try {
	        this.state = 1239;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1237;
	            this.tcf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1238;
	            this.tff_atom_typing();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_logic_formula() {
	    let localctx = new Tcf_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, TPTPParser.RULE_tcf_logic_formula);
	    try {
	        this.state = 1243;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1241;
	            this.tcf_quantified_formula();
	            break;
	        case 12:
	        case 28:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1242;
	            this.cnf_formula();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_quantified_formula() {
	    let localctx = new Tcf_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, TPTPParser.RULE_tcf_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this.match(TPTPParser.T__26);
	        this.state = 1246;
	        this.match(TPTPParser.T__13);
	        this.state = 1247;
	        this.tff_variable_list();
	        this.state = 1248;
	        this.match(TPTPParser.T__14);
	        this.state = 1249;
	        this.match(TPTPParser.T__15);
	        this.state = 1250;
	        this.tcf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula() {
	    let localctx = new Fof_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, TPTPParser.RULE_fof_formula);
	    try {
	        this.state = 1254;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1252;
	            this.fof_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1253;
	            this.fof_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_logic_formula() {
	    let localctx = new Fof_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, TPTPParser.RULE_fof_logic_formula);
	    try {
	        this.state = 1259;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1256;
	            this.fof_binary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1257;
	            this.fof_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1258;
	            this.fof_unitary_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_formula() {
	    let localctx = new Fof_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, TPTPParser.RULE_fof_binary_formula);
	    try {
	        this.state = 1263;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1261;
	            this.fof_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1262;
	            this.fof_binary_assoc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_nonassoc() {
	    let localctx = new Fof_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, TPTPParser.RULE_fof_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1265;
	        this.fof_unit_formula();
	        this.state = 1266;
	        this.nonassoc_connective();
	        this.state = 1267;
	        this.fof_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_assoc() {
	    let localctx = new Fof_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, TPTPParser.RULE_fof_binary_assoc);
	    try {
	        this.state = 1271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1269;
	            this.fof_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1270;
	            this.fof_and_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	fof_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Fof_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 258;
	    this.enterRecursionRule(localctx, 258, TPTPParser.RULE_fof_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1274;
	        this.fof_unit_formula();
	        this.state = 1275;
	        this.match(TPTPParser.Vline);
	        this.state = 1276;
	        this.fof_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1283;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Fof_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_fof_or_formula);
	                this.state = 1278;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1279;
	                this.match(TPTPParser.Vline);
	                this.state = 1280;
	                this.fof_unit_formula(); 
	            }
	            this.state = 1285;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	fof_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Fof_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 260;
	    this.enterRecursionRule(localctx, 260, TPTPParser.RULE_fof_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1287;
	        this.fof_unit_formula();
	        this.state = 1288;
	        this.match(TPTPParser.T__9);
	        this.state = 1289;
	        this.fof_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1296;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Fof_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_fof_and_formula);
	                this.state = 1291;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1292;
	                this.match(TPTPParser.T__9);
	                this.state = 1293;
	                this.fof_unit_formula(); 
	            }
	            this.state = 1298;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	fof_unary_formula() {
	    let localctx = new Fof_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, TPTPParser.RULE_fof_unary_formula);
	    try {
	        this.state = 1303;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1299;
	            this.unary_connective();
	            this.state = 1300;
	            this.fof_unit_formula();
	            break;
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1302;
	            this.fof_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_infix_unary() {
	    let localctx = new Fof_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, TPTPParser.RULE_fof_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1305;
	        this.fof_term();
	        this.state = 1306;
	        this.infix_inequality();
	        this.state = 1307;
	        this.fof_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_unit_formula() {
	    let localctx = new Fof_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, TPTPParser.RULE_fof_unit_formula);
	    try {
	        this.state = 1311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1309;
	            this.fof_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1310;
	            this.fof_unary_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_unitary_formula() {
	    let localctx = new Fof_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, TPTPParser.RULE_fof_unitary_formula);
	    try {
	        this.state = 1319;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 34:
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1313;
	            this.fof_quantified_formula();
	            break;
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1314;
	            this.fof_atomic_formula();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1315;
	            this.match(TPTPParser.T__11);
	            this.state = 1316;
	            this.fof_logic_formula();
	            this.state = 1317;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_quantified_formula() {
	    let localctx = new Fof_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, TPTPParser.RULE_fof_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1321;
	        this.fof_quantifier();
	        this.state = 1322;
	        this.match(TPTPParser.T__13);
	        this.state = 1323;
	        this.fof_variable_list();
	        this.state = 1324;
	        this.match(TPTPParser.T__14);
	        this.state = 1325;
	        this.match(TPTPParser.T__15);
	        this.state = 1326;
	        this.fof_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_variable_list() {
	    let localctx = new Fof_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, TPTPParser.RULE_fof_variable_list);
	    try {
	        this.state = 1333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1328;
	            this.variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1329;
	            this.variable();
	            this.state = 1330;
	            this.match(TPTPParser.T__1);
	            this.state = 1331;
	            this.fof_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_atomic_formula() {
	    let localctx = new Fof_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, TPTPParser.RULE_fof_atomic_formula);
	    try {
	        this.state = 1338;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1335;
	            this.fof_plain_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1336;
	            this.fof_defined_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1337;
	            this.fof_system_atomic_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_plain_atomic_formula() {
	    let localctx = new Fof_plain_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, TPTPParser.RULE_fof_plain_atomic_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1340;
	        this.fof_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_atomic_formula() {
	    let localctx = new Fof_defined_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, TPTPParser.RULE_fof_defined_atomic_formula);
	    try {
	        this.state = 1344;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1342;
	            this.fof_defined_plain_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1343;
	            this.fof_defined_infix_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_plain_formula() {
	    let localctx = new Fof_defined_plain_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, TPTPParser.RULE_fof_defined_plain_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.fof_defined_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_infix_formula() {
	    let localctx = new Fof_defined_infix_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, TPTPParser.RULE_fof_defined_infix_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        this.fof_term();
	        this.state = 1349;
	        this.defined_infix_pred();
	        this.state = 1350;
	        this.fof_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_system_atomic_formula() {
	    let localctx = new Fof_system_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, TPTPParser.RULE_fof_system_atomic_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1352;
	        this.fof_system_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_plain_term() {
	    let localctx = new Fof_plain_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, TPTPParser.RULE_fof_plain_term);
	    try {
	        this.state = 1360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1354;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1355;
	            this.functor();
	            this.state = 1356;
	            this.match(TPTPParser.T__11);
	            this.state = 1357;
	            this.fof_arguments();
	            this.state = 1358;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_term() {
	    let localctx = new Fof_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, TPTPParser.RULE_fof_defined_term);
	    try {
	        this.state = 1364;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1362;
	            this.defined_term();
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1363;
	            this.fof_defined_atomic_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_atomic_term() {
	    let localctx = new Fof_defined_atomic_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, TPTPParser.RULE_fof_defined_atomic_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this.fof_defined_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_plain_term() {
	    let localctx = new Fof_defined_plain_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, TPTPParser.RULE_fof_defined_plain_term);
	    try {
	        this.state = 1374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1368;
	            this.defined_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1369;
	            this.defined_functor();
	            this.state = 1370;
	            this.match(TPTPParser.T__11);
	            this.state = 1371;
	            this.fof_arguments();
	            this.state = 1372;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_system_term() {
	    let localctx = new Fof_system_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, TPTPParser.RULE_fof_system_term);
	    try {
	        this.state = 1382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1376;
	            this.system_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1377;
	            this.system_functor();
	            this.state = 1378;
	            this.match(TPTPParser.T__11);
	            this.state = 1379;
	            this.fof_arguments();
	            this.state = 1380;
	            this.match(TPTPParser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_arguments() {
	    let localctx = new Fof_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, TPTPParser.RULE_fof_arguments);
	    try {
	        this.state = 1389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1384;
	            this.fof_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1385;
	            this.fof_term();
	            this.state = 1386;
	            this.match(TPTPParser.T__1);
	            this.state = 1387;
	            this.fof_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_term() {
	    let localctx = new Fof_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, TPTPParser.RULE_fof_term);
	    try {
	        this.state = 1393;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1391;
	            this.fof_function_term();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1392;
	            this.variable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_function_term() {
	    let localctx = new Fof_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, TPTPParser.RULE_fof_function_term);
	    try {
	        this.state = 1398;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1395;
	            this.fof_plain_term();
	            break;
	        case 66:
	        case 67:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1396;
	            this.fof_defined_term();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1397;
	            this.fof_system_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_sequent() {
	    let localctx = new Fof_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, TPTPParser.RULE_fof_sequent);
	    try {
	        this.state = 1408;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1400;
	            this.fof_formula_tuple();
	            this.state = 1401;
	            this.gentzen_arrow();
	            this.state = 1402;
	            this.fof_formula_tuple();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1404;
	            this.match(TPTPParser.T__11);
	            this.state = 1405;
	            this.fof_sequent();
	            this.state = 1406;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula_tuple() {
	    let localctx = new Fof_formula_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, TPTPParser.RULE_fof_formula_tuple);
	    try {
	        this.state = 1415;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1410;
	            this.match(TPTPParser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1411;
	            this.match(TPTPParser.T__13);
	            this.state = 1412;
	            this.fof_formula_tuple_list();
	            this.state = 1413;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula_tuple_list() {
	    let localctx = new Fof_formula_tuple_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, TPTPParser.RULE_fof_formula_tuple_list);
	    try {
	        this.state = 1422;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1417;
	            this.fof_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1418;
	            this.fof_logic_formula();
	            this.state = 1419;
	            this.match(TPTPParser.T__1);
	            this.state = 1420;
	            this.fof_formula_tuple_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cnf_formula() {
	    let localctx = new Cnf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, TPTPParser.RULE_cnf_formula);
	    try {
	        this.state = 1429;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1424;
	            this.cnf_disjunction(0);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1425;
	            this.match(TPTPParser.T__11);
	            this.state = 1426;
	            this.cnf_formula();
	            this.state = 1427;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	cnf_disjunction(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Cnf_disjunctionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 310;
	    this.enterRecursionRule(localctx, 310, TPTPParser.RULE_cnf_disjunction, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1432;
	        this.cnf_literal();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1439;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Cnf_disjunctionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_cnf_disjunction);
	                this.state = 1434;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1435;
	                this.match(TPTPParser.Vline);
	                this.state = 1436;
	                this.cnf_literal(); 
	            }
	            this.state = 1441;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	cnf_literal() {
	    let localctx = new Cnf_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, TPTPParser.RULE_cnf_literal);
	    try {
	        this.state = 1451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1442;
	            this.fof_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1443;
	            this.match(TPTPParser.T__27);
	            this.state = 1444;
	            this.fof_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1445;
	            this.match(TPTPParser.T__27);
	            this.state = 1446;
	            this.match(TPTPParser.T__11);
	            this.state = 1447;
	            this.fof_atomic_formula();
	            this.state = 1448;
	            this.match(TPTPParser.T__12);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1450;
	            this.fof_infix_unary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantifier() {
	    let localctx = new Thf_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, TPTPParser.RULE_thf_quantifier);
	    try {
	        this.state = 1456;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 34:
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1453;
	            this.fof_quantifier();
	            break;
	        case 30:
	        case 31:
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1454;
	            this.th0_quantifier();
	            break;
	        case 19:
	        case 29:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1455;
	            this.th1_quantifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unary_connective() {
	    let localctx = new Thf_unary_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, TPTPParser.RULE_thf_unary_connective);
	    try {
	        this.state = 1460;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1458;
	            this.unary_connective();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1459;
	            this.ntf_short_connective();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th1_quantifier() {
	    let localctx = new Th1_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, TPTPParser.RULE_th1_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1462;
	        _la = this._input.LA(1);
	        if(!(_la===19 || _la===29)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th0_quantifier() {
	    let localctx = new Th0_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, TPTPParser.RULE_th0_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1464;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtype_sign() {
	    let localctx = new Subtype_signContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, TPTPParser.RULE_subtype_sign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        this.match(TPTPParser.T__32);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unary_connective() {
	    let localctx = new Tff_unary_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, TPTPParser.RULE_tff_unary_connective);
	    try {
	        this.state = 1470;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1468;
	            this.unary_connective();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1469;
	            this.ntf_short_connective();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_quantifier() {
	    let localctx = new Tff_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, TPTPParser.RULE_tff_quantifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1472;
	        this.fof_quantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_quantifier() {
	    let localctx = new Fof_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, TPTPParser.RULE_fof_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1474;
	        _la = this._input.LA(1);
	        if(!(_la===27 || _la===34 || _la===76)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonassoc_connective() {
	    let localctx = new Nonassoc_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, TPTPParser.RULE_nonassoc_connective);
	    try {
	        this.state = 1483;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1476;
	            this.match(TPTPParser.T__34);
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1477;
	            this.match(TPTPParser.T__35);
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1478;
	            this.match(TPTPParser.T__36);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1479;
	            this.match(TPTPParser.T__37);
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1480;
	            this.match(TPTPParser.T__27);
	            this.state = 1481;
	            this.match(TPTPParser.Vline);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1482;
	            this.match(TPTPParser.T__38);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assoc_connective() {
	    let localctx = new Assoc_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, TPTPParser.RULE_assoc_connective);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1485;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===71)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_connective() {
	    let localctx = new Unary_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, TPTPParser.RULE_unary_connective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1487;
	        this.match(TPTPParser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gentzen_arrow() {
	    let localctx = new Gentzen_arrowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, TPTPParser.RULE_gentzen_arrow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.match(TPTPParser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, TPTPParser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1491;
	        this.match(TPTPParser.T__40);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identical() {
	    let localctx = new IdenticalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, TPTPParser.RULE_identical);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1493;
	        this.match(TPTPParser.T__41);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_constant() {
	    let localctx = new Type_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, TPTPParser.RULE_type_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1495;
	        this.type_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_functor() {
	    let localctx = new Type_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, TPTPParser.RULE_type_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1497;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_type() {
	    let localctx = new Defined_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, TPTPParser.RULE_defined_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1499;
	        this.atomic_defined_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, TPTPParser.RULE_atom);
	    try {
	        this.state = 1503;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 68:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1501;
	            this.untyped_atom();
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1502;
	            this.defined_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untyped_atom() {
	    let localctx = new Untyped_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, TPTPParser.RULE_untyped_atom);
	    try {
	        this.state = 1507;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1505;
	            this.constant();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1506;
	            this.system_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_infix_pred() {
	    let localctx = new Defined_infix_predContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, TPTPParser.RULE_defined_infix_pred);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1509;
	        this.infix_equality();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infix_equality() {
	    let localctx = new Infix_equalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, TPTPParser.RULE_infix_equality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1511;
	        this.match(TPTPParser.T__42);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infix_inequality() {
	    let localctx = new Infix_inequalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, TPTPParser.RULE_infix_inequality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1513;
	        this.match(TPTPParser.T__43);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, TPTPParser.RULE_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1515;
	        this.functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functor() {
	    let localctx = new FunctorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, TPTPParser.RULE_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1517;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_constant() {
	    let localctx = new Defined_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, TPTPParser.RULE_defined_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1519;
	        this.defined_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_functor() {
	    let localctx = new Defined_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, TPTPParser.RULE_defined_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1521;
	        this.atomic_defined_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_constant() {
	    let localctx = new System_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, TPTPParser.RULE_system_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1523;
	        this.system_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_functor() {
	    let localctx = new System_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, TPTPParser.RULE_system_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1525;
	        this.atomic_system_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_or_sys_constant() {
	    let localctx = new Def_or_sys_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, TPTPParser.RULE_def_or_sys_constant);
	    try {
	        this.state = 1529;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1527;
	            this.defined_constant();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1528;
	            this.system_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th1_defined_term() {
	    let localctx = new Th1_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, TPTPParser.RULE_th1_defined_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_term() {
	    let localctx = new Defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, TPTPParser.RULE_defined_term);
	    try {
	        this.state = 1535;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1533;
	            this.number();
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1534;
	            this.match(TPTPParser.Distinct_object);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, TPTPParser.RULE_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1537;
	        this.match(TPTPParser.Upper_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	source() {
	    let localctx = new SourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, TPTPParser.RULE_source);
	    try {
	        this.state = 1546;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	        case 65:
	        case 70:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1539;
	            this.dag_source();
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1540;
	            this.internal_source();
	            break;
	        case 52:
	        case 53:
	        case 54:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1541;
	            this.external_source();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1542;
	            this.match(TPTPParser.T__13);
	            this.state = 1543;
	            this.sources();
	            this.state = 1544;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sources() {
	    let localctx = new SourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, TPTPParser.RULE_sources);
	    try {
	        this.state = 1553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1548;
	            this.source();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1549;
	            this.source();
	            this.state = 1550;
	            this.match(TPTPParser.T__1);
	            this.state = 1551;
	            this.sources();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dag_source() {
	    let localctx = new Dag_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, TPTPParser.RULE_dag_source);
	    try {
	        this.state = 1557;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1555;
	            this.name();
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1556;
	            this.inference_record();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_record() {
	    let localctx = new Inference_recordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, TPTPParser.RULE_inference_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1559;
	        this.match(TPTPParser.T__49);
	        this.state = 1560;
	        this.inference_rule();
	        this.state = 1561;
	        this.match(TPTPParser.T__1);
	        this.state = 1562;
	        this.useful_info();
	        this.state = 1563;
	        this.match(TPTPParser.T__1);
	        this.state = 1564;
	        this.parents();
	        this.state = 1565;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_rule() {
	    let localctx = new Inference_ruleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, TPTPParser.RULE_inference_rule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1567;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	internal_source() {
	    let localctx = new Internal_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, TPTPParser.RULE_internal_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1569;
	        this.match(TPTPParser.T__50);
	        this.state = 1570;
	        this.intro_type();
	        this.state = 1571;
	        this.match(TPTPParser.T__1);
	        this.state = 1572;
	        this.useful_info();
	        this.state = 1573;
	        this.match(TPTPParser.T__1);
	        this.state = 1574;
	        this.parents();
	        this.state = 1575;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intro_type() {
	    let localctx = new Intro_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, TPTPParser.RULE_intro_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1577;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_source() {
	    let localctx = new External_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, TPTPParser.RULE_external_source);
	    try {
	        this.state = 1582;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 52:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1579;
	            this.file_source();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1580;
	            this.theory();
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1581;
	            this.creator_source();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_source() {
	    let localctx = new File_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, TPTPParser.RULE_file_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1584;
	        this.match(TPTPParser.T__51);
	        this.state = 1585;
	        this.file_name();
	        this.state = 1586;
	        this.file_info();
	        this.state = 1587;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_info() {
	    let localctx = new File_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, TPTPParser.RULE_file_info);
	    try {
	        this.state = 1592;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1589;
	            this.match(TPTPParser.T__1);
	            this.state = 1590;
	            this.name();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1591;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theory() {
	    let localctx = new TheoryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, TPTPParser.RULE_theory);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1594;
	        this.match(TPTPParser.T__52);
	        this.state = 1595;
	        this.theory_name();
	        this.state = 1596;
	        this.optional_info();
	        this.state = 1597;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theory_name() {
	    let localctx = new Theory_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, TPTPParser.RULE_theory_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1599;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator_source() {
	    let localctx = new Creator_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, TPTPParser.RULE_creator_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1601;
	        this.match(TPTPParser.T__53);
	        this.state = 1602;
	        this.creator_name();
	        this.state = 1603;
	        this.match(TPTPParser.T__1);
	        this.state = 1604;
	        this.useful_info();
	        this.state = 1605;
	        this.match(TPTPParser.T__1);
	        this.state = 1606;
	        this.parents();
	        this.state = 1607;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator_name() {
	    let localctx = new Creator_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, TPTPParser.RULE_creator_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parents() {
	    let localctx = new ParentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, TPTPParser.RULE_parents);
	    try {
	        this.state = 1616;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1611;
	            this.match(TPTPParser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1612;
	            this.match(TPTPParser.T__13);
	            this.state = 1613;
	            this.parent_list();
	            this.state = 1614;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parent_list() {
	    let localctx = new Parent_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, TPTPParser.RULE_parent_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1618;
	        this.parent_info();
	        this.state = 1623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 1619;
	            this.match(TPTPParser.T__1);
	            this.state = 1620;
	            this.parent_info();
	            this.state = 1625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parent_info() {
	    let localctx = new Parent_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, TPTPParser.RULE_parent_info);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1626;
	        this.source();
	        this.state = 1627;
	        this.parent_details();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parent_details() {
	    let localctx = new Parent_detailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, TPTPParser.RULE_parent_details);
	    try {
	        this.state = 1632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1629;
	            this.match(TPTPParser.T__15);
	            this.state = 1630;
	            this.general_list();
	            break;
	        case 2:
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1631;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_info() {
	    let localctx = new Optional_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, TPTPParser.RULE_optional_info);
	    try {
	        this.state = 1637;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1634;
	            this.match(TPTPParser.T__1);
	            this.state = 1635;
	            this.useful_info();
	            break;
	        case 3:
	        case 13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1636;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useful_info() {
	    let localctx = new Useful_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, TPTPParser.RULE_useful_info);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1639;
	        this.general_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	include() {
	    let localctx = new IncludeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, TPTPParser.RULE_include);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1641;
	        this.match(TPTPParser.T__54);
	        this.state = 1642;
	        this.file_name();
	        this.state = 1643;
	        this.include_optionals();
	        this.state = 1644;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	include_optionals() {
	    let localctx = new Include_optionalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, TPTPParser.RULE_include_optionals);
	    try {
	        this.state = 1654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1646;
	            this.null_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1647;
	            this.match(TPTPParser.T__1);
	            this.state = 1648;
	            this.formula_selection();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1649;
	            this.match(TPTPParser.T__1);
	            this.state = 1650;
	            this.formula_selection();
	            this.state = 1651;
	            this.match(TPTPParser.T__1);
	            this.state = 1652;
	            this.space_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_selection() {
	    let localctx = new Formula_selectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, TPTPParser.RULE_formula_selection);
	    try {
	        this.state = 1661;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1656;
	            this.match(TPTPParser.T__13);
	            this.state = 1657;
	            this.name_list();
	            this.state = 1658;
	            this.match(TPTPParser.T__14);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1660;
	            this.match(TPTPParser.Star);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_list() {
	    let localctx = new Name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, TPTPParser.RULE_name_list);
	    try {
	        this.state = 1668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1663;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1664;
	            this.name();
	            this.state = 1665;
	            this.match(TPTPParser.T__1);
	            this.state = 1666;
	            this.name_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	space_name() {
	    let localctx = new Space_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, TPTPParser.RULE_space_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1670;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_term() {
	    let localctx = new General_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, TPTPParser.RULE_general_term);
	    try {
	        this.state = 1678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1672;
	            this.general_data();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1673;
	            this.general_data();
	            this.state = 1674;
	            this.match(TPTPParser.T__15);
	            this.state = 1675;
	            this.general_term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1677;
	            this.general_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_data() {
	    let localctx = new General_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, TPTPParser.RULE_general_data);
	    try {
	        this.state = 1686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1680;
	            this.atomic_word();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1681;
	            this.general_function();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1682;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1683;
	            this.number();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1684;
	            this.match(TPTPParser.Distinct_object);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1685;
	            this.formula_data();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_function() {
	    let localctx = new General_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, TPTPParser.RULE_general_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1688;
	        this.atomic_word();
	        this.state = 1689;
	        this.match(TPTPParser.T__11);
	        this.state = 1690;
	        this.general_terms();
	        this.state = 1691;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_data() {
	    let localctx = new Formula_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, TPTPParser.RULE_formula_data);
	    try {
	        this.state = 1713;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1693;
	            this.match(TPTPParser.T__55);
	            this.state = 1694;
	            this.thf_formula();
	            this.state = 1695;
	            this.match(TPTPParser.T__12);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1697;
	            this.match(TPTPParser.T__56);
	            this.state = 1698;
	            this.tff_formula();
	            this.state = 1699;
	            this.match(TPTPParser.T__12);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1701;
	            this.match(TPTPParser.T__57);
	            this.state = 1702;
	            this.fof_formula();
	            this.state = 1703;
	            this.match(TPTPParser.T__12);
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1705;
	            this.match(TPTPParser.T__58);
	            this.state = 1706;
	            this.cnf_formula();
	            this.state = 1707;
	            this.match(TPTPParser.T__12);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1709;
	            this.match(TPTPParser.T__59);
	            this.state = 1710;
	            this.fof_term();
	            this.state = 1711;
	            this.match(TPTPParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_list() {
	    let localctx = new General_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, TPTPParser.RULE_general_list);
	    try {
	        this.state = 1720;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1715;
	            this.match(TPTPParser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1716;
	            this.match(TPTPParser.T__13);
	            this.state = 1717;
	            this.general_terms();
	            this.state = 1718;
	            this.match(TPTPParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_terms() {
	    let localctx = new General_termsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, TPTPParser.RULE_general_terms);
	    try {
	        this.state = 1727;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1722;
	            this.general_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1723;
	            this.general_term();
	            this.state = 1724;
	            this.match(TPTPParser.T__1);
	            this.state = 1725;
	            this.general_terms();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, TPTPParser.RULE_name);
	    try {
	        this.state = 1731;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1729;
	            this.atomic_word();
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1730;
	            this.match(TPTPParser.Integer);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_word() {
	    let localctx = new Atomic_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, TPTPParser.RULE_atomic_word);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1733;
	        _la = this._input.LA(1);
	        if(!(_la===65 || _la===70)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_defined_word() {
	    let localctx = new Atomic_defined_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, TPTPParser.RULE_atomic_defined_word);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1735;
	        this.match(TPTPParser.Dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_system_word() {
	    let localctx = new Atomic_system_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, TPTPParser.RULE_atomic_system_word);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1737;
	        this.match(TPTPParser.Dollar_dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, TPTPParser.RULE_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1739;
	        _la = this._input.LA(1);
	        if(!(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 73) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_name() {
	    let localctx = new File_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, TPTPParser.RULE_file_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1741;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_() {
	    let localctx = new NullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, TPTPParser.RULE_null);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

TPTPParser.EOF = antlr4.Token.EOF;
TPTPParser.T__0 = 1;
TPTPParser.T__1 = 2;
TPTPParser.T__2 = 3;
TPTPParser.T__3 = 4;
TPTPParser.T__4 = 5;
TPTPParser.T__5 = 6;
TPTPParser.T__6 = 7;
TPTPParser.T__7 = 8;
TPTPParser.T__8 = 9;
TPTPParser.T__9 = 10;
TPTPParser.T__10 = 11;
TPTPParser.T__11 = 12;
TPTPParser.T__12 = 13;
TPTPParser.T__13 = 14;
TPTPParser.T__14 = 15;
TPTPParser.T__15 = 16;
TPTPParser.T__16 = 17;
TPTPParser.T__17 = 18;
TPTPParser.T__18 = 19;
TPTPParser.T__19 = 20;
TPTPParser.T__20 = 21;
TPTPParser.T__21 = 22;
TPTPParser.T__22 = 23;
TPTPParser.T__23 = 24;
TPTPParser.T__24 = 25;
TPTPParser.T__25 = 26;
TPTPParser.T__26 = 27;
TPTPParser.T__27 = 28;
TPTPParser.T__28 = 29;
TPTPParser.T__29 = 30;
TPTPParser.T__30 = 31;
TPTPParser.T__31 = 32;
TPTPParser.T__32 = 33;
TPTPParser.T__33 = 34;
TPTPParser.T__34 = 35;
TPTPParser.T__35 = 36;
TPTPParser.T__36 = 37;
TPTPParser.T__37 = 38;
TPTPParser.T__38 = 39;
TPTPParser.T__39 = 40;
TPTPParser.T__40 = 41;
TPTPParser.T__41 = 42;
TPTPParser.T__42 = 43;
TPTPParser.T__43 = 44;
TPTPParser.T__44 = 45;
TPTPParser.T__45 = 46;
TPTPParser.T__46 = 47;
TPTPParser.T__47 = 48;
TPTPParser.T__48 = 49;
TPTPParser.T__49 = 50;
TPTPParser.T__50 = 51;
TPTPParser.T__51 = 52;
TPTPParser.T__52 = 53;
TPTPParser.T__53 = 54;
TPTPParser.T__54 = 55;
TPTPParser.T__55 = 56;
TPTPParser.T__56 = 57;
TPTPParser.T__57 = 58;
TPTPParser.T__58 = 59;
TPTPParser.T__59 = 60;
TPTPParser.WS = 61;
TPTPParser.Comment_line = 62;
TPTPParser.Comment_block = 63;
TPTPParser.Not_star_slash = 64;
TPTPParser.Single_quoted = 65;
TPTPParser.Distinct_object = 66;
TPTPParser.Dollar_word = 67;
TPTPParser.Dollar_dollar_word = 68;
TPTPParser.Upper_word = 69;
TPTPParser.Lower_word = 70;
TPTPParser.Vline = 71;
TPTPParser.Star = 72;
TPTPParser.Plus = 73;
TPTPParser.Arrow = 74;
TPTPParser.Less_sign = 75;
TPTPParser.Hash = 76;
TPTPParser.Real = 77;
TPTPParser.Signed_real = 78;
TPTPParser.Unsigned_real = 79;
TPTPParser.Rational = 80;
TPTPParser.Signed_rational = 81;
TPTPParser.Unsigned_rational = 82;
TPTPParser.Integer = 83;
TPTPParser.Signed_integer = 84;
TPTPParser.Unsigned_integer = 85;
TPTPParser.Decimal = 86;
TPTPParser.Positive_decimal = 87;
TPTPParser.Decimal_exponent = 88;
TPTPParser.Decimal_fraction = 89;
TPTPParser.Dot_decimal = 90;
TPTPParser.Exp_integer = 91;
TPTPParser.Signed_exp_integer = 92;
TPTPParser.Unsigned_exp_integer = 93;
TPTPParser.Slash = 94;
TPTPParser.Slosh = 95;
TPTPParser.Percentage_sign = 96;
TPTPParser.Double_quote = 97;
TPTPParser.Single_quote = 98;
TPTPParser.Dot = 99;
TPTPParser.Slash_char = 100;
TPTPParser.Slosh_char = 101;
TPTPParser.Zero_numeric = 102;
TPTPParser.Dollar = 103;
TPTPParser.Printable_char = 104;
TPTPParser.Viewable_char = 105;

TPTPParser.RULE_tptp_file = 0;
TPTPParser.RULE_tptp_input = 1;
TPTPParser.RULE_annotated_formula = 2;
TPTPParser.RULE_tpi_annotated = 3;
TPTPParser.RULE_tpi_formula = 4;
TPTPParser.RULE_thf_annotated = 5;
TPTPParser.RULE_tff_annotated = 6;
TPTPParser.RULE_tcf_annotated = 7;
TPTPParser.RULE_fof_annotated = 8;
TPTPParser.RULE_cnf_annotated = 9;
TPTPParser.RULE_annotations = 10;
TPTPParser.RULE_formula_role = 11;
TPTPParser.RULE_thf_formula = 12;
TPTPParser.RULE_thf_logic_formula = 13;
TPTPParser.RULE_thf_binary_formula = 14;
TPTPParser.RULE_thf_binary_nonassoc = 15;
TPTPParser.RULE_thf_binary_assoc = 16;
TPTPParser.RULE_thf_or_formula = 17;
TPTPParser.RULE_thf_and_formula = 18;
TPTPParser.RULE_thf_apply_formula = 19;
TPTPParser.RULE_thf_unit_formula = 20;
TPTPParser.RULE_thf_preunit_formula = 21;
TPTPParser.RULE_thf_unitary_formula = 22;
TPTPParser.RULE_thf_quantified_formula = 23;
TPTPParser.RULE_thf_quantification = 24;
TPTPParser.RULE_thf_variable_list = 25;
TPTPParser.RULE_thf_typed_variable = 26;
TPTPParser.RULE_thf_unary_formula = 27;
TPTPParser.RULE_thf_prefix_unary = 28;
TPTPParser.RULE_thf_infix_unary = 29;
TPTPParser.RULE_thf_atomic_formula = 30;
TPTPParser.RULE_thf_plain_atomic = 31;
TPTPParser.RULE_thf_defined_atomic = 32;
TPTPParser.RULE_thf_defined_term = 33;
TPTPParser.RULE_thf_defined_infix = 34;
TPTPParser.RULE_thf_system_atomic = 35;
TPTPParser.RULE_thf_let = 36;
TPTPParser.RULE_thf_let_types = 37;
TPTPParser.RULE_thf_atom_typing_list = 38;
TPTPParser.RULE_thf_let_defns = 39;
TPTPParser.RULE_thf_let_defn = 40;
TPTPParser.RULE_thf_let_defn_list = 41;
TPTPParser.RULE_thf_unitary_term = 42;
TPTPParser.RULE_thf_conn_term = 43;
TPTPParser.RULE_thf_tuple = 44;
TPTPParser.RULE_thf_fof_function = 45;
TPTPParser.RULE_thf_arguments = 46;
TPTPParser.RULE_thf_formula_list = 47;
TPTPParser.RULE_thf_atom_typing = 48;
TPTPParser.RULE_thf_top_level_type = 49;
TPTPParser.RULE_thf_unitary_type = 50;
TPTPParser.RULE_thf_apply_type = 51;
TPTPParser.RULE_thf_binary_type = 52;
TPTPParser.RULE_thf_mapping_type = 53;
TPTPParser.RULE_thf_xprod_type = 54;
TPTPParser.RULE_thf_union_type = 55;
TPTPParser.RULE_thf_subtype = 56;
TPTPParser.RULE_thf_definition = 57;
TPTPParser.RULE_thf_sequent = 58;
TPTPParser.RULE_tff_formula = 59;
TPTPParser.RULE_tff_logic_formula = 60;
TPTPParser.RULE_tff_binary_formula = 61;
TPTPParser.RULE_tff_binary_nonassoc = 62;
TPTPParser.RULE_tff_binary_assoc = 63;
TPTPParser.RULE_tff_or_formula = 64;
TPTPParser.RULE_tff_and_formula = 65;
TPTPParser.RULE_tff_unit_formula = 66;
TPTPParser.RULE_tff_preunit_formula = 67;
TPTPParser.RULE_tff_unitary_formula = 68;
TPTPParser.RULE_txf_unitary_formula = 69;
TPTPParser.RULE_tff_quantified_formula = 70;
TPTPParser.RULE_tff_variable_list = 71;
TPTPParser.RULE_tff_variable = 72;
TPTPParser.RULE_tff_typed_variable = 73;
TPTPParser.RULE_tff_unary_formula = 74;
TPTPParser.RULE_tff_prefix_unary = 75;
TPTPParser.RULE_tff_infix_unary = 76;
TPTPParser.RULE_tff_atomic_formula = 77;
TPTPParser.RULE_tff_plain_atomic = 78;
TPTPParser.RULE_tff_defined_atomic = 79;
TPTPParser.RULE_tff_defined_plain = 80;
TPTPParser.RULE_tff_defined_infix = 81;
TPTPParser.RULE_tff_system_atomic = 82;
TPTPParser.RULE_txf_let = 83;
TPTPParser.RULE_txf_let_types = 84;
TPTPParser.RULE_tff_atom_typing_list = 85;
TPTPParser.RULE_txf_let_defns = 86;
TPTPParser.RULE_txf_let_defn = 87;
TPTPParser.RULE_txf_let_LHS = 88;
TPTPParser.RULE_txf_let_defn_list = 89;
TPTPParser.RULE_nxf_atom = 90;
TPTPParser.RULE_tff_term = 91;
TPTPParser.RULE_tff_unitary_term = 92;
TPTPParser.RULE_txf_tuple = 93;
TPTPParser.RULE_tff_arguments = 94;
TPTPParser.RULE_tff_atom_typing = 95;
TPTPParser.RULE_tff_top_level_type = 96;
TPTPParser.RULE_tff_non_atomic_type = 97;
TPTPParser.RULE_tf1_quantified_type = 98;
TPTPParser.RULE_tff_monotype = 99;
TPTPParser.RULE_tff_unitary_type = 100;
TPTPParser.RULE_tff_atomic_type = 101;
TPTPParser.RULE_tff_type_arguments = 102;
TPTPParser.RULE_tff_mapping_type = 103;
TPTPParser.RULE_tff_xprod_type = 104;
TPTPParser.RULE_txf_tuple_type = 105;
TPTPParser.RULE_tff_type_list = 106;
TPTPParser.RULE_tff_subtype = 107;
TPTPParser.RULE_txf_definition = 108;
TPTPParser.RULE_txf_sequent = 109;
TPTPParser.RULE_nhf_long_connective = 110;
TPTPParser.RULE_nhf_parameter_list = 111;
TPTPParser.RULE_nhf_parameter = 112;
TPTPParser.RULE_nhf_key_pair = 113;
TPTPParser.RULE_nxf_long_connective = 114;
TPTPParser.RULE_nxf_parameter_list = 115;
TPTPParser.RULE_nxf_parameter = 116;
TPTPParser.RULE_nxf_key_pair = 117;
TPTPParser.RULE_ntf_connective_name = 118;
TPTPParser.RULE_ntf_index = 119;
TPTPParser.RULE_ntf_short_connective = 120;
TPTPParser.RULE_tcf_formula = 121;
TPTPParser.RULE_tcf_logic_formula = 122;
TPTPParser.RULE_tcf_quantified_formula = 123;
TPTPParser.RULE_fof_formula = 124;
TPTPParser.RULE_fof_logic_formula = 125;
TPTPParser.RULE_fof_binary_formula = 126;
TPTPParser.RULE_fof_binary_nonassoc = 127;
TPTPParser.RULE_fof_binary_assoc = 128;
TPTPParser.RULE_fof_or_formula = 129;
TPTPParser.RULE_fof_and_formula = 130;
TPTPParser.RULE_fof_unary_formula = 131;
TPTPParser.RULE_fof_infix_unary = 132;
TPTPParser.RULE_fof_unit_formula = 133;
TPTPParser.RULE_fof_unitary_formula = 134;
TPTPParser.RULE_fof_quantified_formula = 135;
TPTPParser.RULE_fof_variable_list = 136;
TPTPParser.RULE_fof_atomic_formula = 137;
TPTPParser.RULE_fof_plain_atomic_formula = 138;
TPTPParser.RULE_fof_defined_atomic_formula = 139;
TPTPParser.RULE_fof_defined_plain_formula = 140;
TPTPParser.RULE_fof_defined_infix_formula = 141;
TPTPParser.RULE_fof_system_atomic_formula = 142;
TPTPParser.RULE_fof_plain_term = 143;
TPTPParser.RULE_fof_defined_term = 144;
TPTPParser.RULE_fof_defined_atomic_term = 145;
TPTPParser.RULE_fof_defined_plain_term = 146;
TPTPParser.RULE_fof_system_term = 147;
TPTPParser.RULE_fof_arguments = 148;
TPTPParser.RULE_fof_term = 149;
TPTPParser.RULE_fof_function_term = 150;
TPTPParser.RULE_fof_sequent = 151;
TPTPParser.RULE_fof_formula_tuple = 152;
TPTPParser.RULE_fof_formula_tuple_list = 153;
TPTPParser.RULE_cnf_formula = 154;
TPTPParser.RULE_cnf_disjunction = 155;
TPTPParser.RULE_cnf_literal = 156;
TPTPParser.RULE_thf_quantifier = 157;
TPTPParser.RULE_thf_unary_connective = 158;
TPTPParser.RULE_th1_quantifier = 159;
TPTPParser.RULE_th0_quantifier = 160;
TPTPParser.RULE_subtype_sign = 161;
TPTPParser.RULE_tff_unary_connective = 162;
TPTPParser.RULE_tff_quantifier = 163;
TPTPParser.RULE_fof_quantifier = 164;
TPTPParser.RULE_nonassoc_connective = 165;
TPTPParser.RULE_assoc_connective = 166;
TPTPParser.RULE_unary_connective = 167;
TPTPParser.RULE_gentzen_arrow = 168;
TPTPParser.RULE_assignment = 169;
TPTPParser.RULE_identical = 170;
TPTPParser.RULE_type_constant = 171;
TPTPParser.RULE_type_functor = 172;
TPTPParser.RULE_defined_type = 173;
TPTPParser.RULE_atom = 174;
TPTPParser.RULE_untyped_atom = 175;
TPTPParser.RULE_defined_infix_pred = 176;
TPTPParser.RULE_infix_equality = 177;
TPTPParser.RULE_infix_inequality = 178;
TPTPParser.RULE_constant = 179;
TPTPParser.RULE_functor = 180;
TPTPParser.RULE_defined_constant = 181;
TPTPParser.RULE_defined_functor = 182;
TPTPParser.RULE_system_constant = 183;
TPTPParser.RULE_system_functor = 184;
TPTPParser.RULE_def_or_sys_constant = 185;
TPTPParser.RULE_th1_defined_term = 186;
TPTPParser.RULE_defined_term = 187;
TPTPParser.RULE_variable = 188;
TPTPParser.RULE_source = 189;
TPTPParser.RULE_sources = 190;
TPTPParser.RULE_dag_source = 191;
TPTPParser.RULE_inference_record = 192;
TPTPParser.RULE_inference_rule = 193;
TPTPParser.RULE_internal_source = 194;
TPTPParser.RULE_intro_type = 195;
TPTPParser.RULE_external_source = 196;
TPTPParser.RULE_file_source = 197;
TPTPParser.RULE_file_info = 198;
TPTPParser.RULE_theory = 199;
TPTPParser.RULE_theory_name = 200;
TPTPParser.RULE_creator_source = 201;
TPTPParser.RULE_creator_name = 202;
TPTPParser.RULE_parents = 203;
TPTPParser.RULE_parent_list = 204;
TPTPParser.RULE_parent_info = 205;
TPTPParser.RULE_parent_details = 206;
TPTPParser.RULE_optional_info = 207;
TPTPParser.RULE_useful_info = 208;
TPTPParser.RULE_include = 209;
TPTPParser.RULE_include_optionals = 210;
TPTPParser.RULE_formula_selection = 211;
TPTPParser.RULE_name_list = 212;
TPTPParser.RULE_space_name = 213;
TPTPParser.RULE_general_term = 214;
TPTPParser.RULE_general_data = 215;
TPTPParser.RULE_general_function = 216;
TPTPParser.RULE_formula_data = 217;
TPTPParser.RULE_general_list = 218;
TPTPParser.RULE_general_terms = 219;
TPTPParser.RULE_name = 220;
TPTPParser.RULE_atomic_word = 221;
TPTPParser.RULE_atomic_defined_word = 222;
TPTPParser.RULE_atomic_system_word = 223;
TPTPParser.RULE_number = 224;
TPTPParser.RULE_file_name = 225;
TPTPParser.RULE_null = 226;

class Tptp_fileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tptp_file;
    }

	EOF() {
	    return this.getToken(TPTPParser.EOF, 0);
	};

	tptp_input = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tptp_inputContext);
	    } else {
	        return this.getTypedRuleContext(Tptp_inputContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTptp_file(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTptp_file(this);
		}
	}


}



class Tptp_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tptp_input;
    }

	annotated_formula() {
	    return this.getTypedRuleContext(Annotated_formulaContext,0);
	};

	include() {
	    return this.getTypedRuleContext(IncludeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTptp_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTptp_input(this);
		}
	}


}



class Annotated_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_annotated_formula;
    }

	thf_annotated() {
	    return this.getTypedRuleContext(Thf_annotatedContext,0);
	};

	tff_annotated() {
	    return this.getTypedRuleContext(Tff_annotatedContext,0);
	};

	tcf_annotated() {
	    return this.getTypedRuleContext(Tcf_annotatedContext,0);
	};

	fof_annotated() {
	    return this.getTypedRuleContext(Fof_annotatedContext,0);
	};

	cnf_annotated() {
	    return this.getTypedRuleContext(Cnf_annotatedContext,0);
	};

	tpi_annotated() {
	    return this.getTypedRuleContext(Tpi_annotatedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAnnotated_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAnnotated_formula(this);
		}
	}


}



class Tpi_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tpi_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tpi_formula() {
	    return this.getTypedRuleContext(Tpi_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTpi_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTpi_annotated(this);
		}
	}


}



class Tpi_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tpi_formula;
    }

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTpi_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTpi_formula(this);
		}
	}


}



class Thf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	thf_formula() {
	    return this.getTypedRuleContext(Thf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_annotated(this);
		}
	}


}



class Tff_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tff_formula() {
	    return this.getTypedRuleContext(Tff_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_annotated(this);
		}
	}


}



class Tcf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tcf_formula() {
	    return this.getTypedRuleContext(Tcf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_annotated(this);
		}
	}


}



class Fof_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_annotated(this);
		}
	}


}



class Cnf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_annotated(this);
		}
	}


}



class AnnotationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_annotations;
    }

	source() {
	    return this.getTypedRuleContext(SourceContext,0);
	};

	optional_info() {
	    return this.getTypedRuleContext(Optional_infoContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAnnotations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAnnotations(this);
		}
	}


}



class Formula_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_formula_role;
    }

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFormula_role(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFormula_role(this);
		}
	}


}



class Thf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_formula;
    }

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_subtype() {
	    return this.getTypedRuleContext(Thf_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_formula(this);
		}
	}


}



class Thf_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_logic_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_unary_formula() {
	    return this.getTypedRuleContext(Thf_unary_formulaContext,0);
	};

	thf_binary_formula() {
	    return this.getTypedRuleContext(Thf_binary_formulaContext,0);
	};

	thf_defined_infix() {
	    return this.getTypedRuleContext(Thf_defined_infixContext,0);
	};

	thf_definition() {
	    return this.getTypedRuleContext(Thf_definitionContext,0);
	};

	thf_sequent() {
	    return this.getTypedRuleContext(Thf_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_logic_formula(this);
		}
	}


}



class Thf_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_formula;
    }

	thf_binary_nonassoc() {
	    return this.getTypedRuleContext(Thf_binary_nonassocContext,0);
	};

	thf_binary_assoc() {
	    return this.getTypedRuleContext(Thf_binary_assocContext,0);
	};

	thf_binary_type() {
	    return this.getTypedRuleContext(Thf_binary_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_formula(this);
		}
	}


}



class Thf_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_nonassoc;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_nonassoc(this);
		}
	}


}



class Thf_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_assoc;
    }

	thf_or_formula() {
	    return this.getTypedRuleContext(Thf_or_formulaContext,0);
	};

	thf_and_formula() {
	    return this.getTypedRuleContext(Thf_and_formulaContext,0);
	};

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_assoc(this);
		}
	}


}



class Thf_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_or_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	Vline() {
	    return this.getToken(TPTPParser.Vline, 0);
	};

	thf_or_formula() {
	    return this.getTypedRuleContext(Thf_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_or_formula(this);
		}
	}


}



class Thf_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_and_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	thf_and_formula() {
	    return this.getTypedRuleContext(Thf_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_and_formula(this);
		}
	}


}



class Thf_apply_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_apply_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_apply_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_apply_formula(this);
		}
	}


}



class Thf_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unit_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_unary_formula() {
	    return this.getTypedRuleContext(Thf_unary_formulaContext,0);
	};

	thf_defined_infix() {
	    return this.getTypedRuleContext(Thf_defined_infixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unit_formula(this);
		}
	}


}



class Thf_preunit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_preunit_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_prefix_unary() {
	    return this.getTypedRuleContext(Thf_prefix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_preunit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_preunit_formula(this);
		}
	}


}



class Thf_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unitary_formula;
    }

	thf_quantified_formula() {
	    return this.getTypedRuleContext(Thf_quantified_formulaContext,0);
	};

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unitary_formula(this);
		}
	}


}



class Thf_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_quantified_formula;
    }

	thf_quantification() {
	    return this.getTypedRuleContext(Thf_quantificationContext,0);
	};

	thf_unit_formula() {
	    return this.getTypedRuleContext(Thf_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_quantified_formula(this);
		}
	}


}



class Thf_quantificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_quantification;
    }

	thf_quantifier() {
	    return this.getTypedRuleContext(Thf_quantifierContext,0);
	};

	thf_variable_list() {
	    return this.getTypedRuleContext(Thf_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_quantification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_quantification(this);
		}
	}


}



class Thf_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_variable_list;
    }

	thf_typed_variable() {
	    return this.getTypedRuleContext(Thf_typed_variableContext,0);
	};

	thf_variable_list() {
	    return this.getTypedRuleContext(Thf_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_variable_list(this);
		}
	}


}



class Thf_typed_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_typed_variable;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_top_level_type() {
	    return this.getTypedRuleContext(Thf_top_level_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_typed_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_typed_variable(this);
		}
	}


}



class Thf_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unary_formula;
    }

	thf_prefix_unary() {
	    return this.getTypedRuleContext(Thf_prefix_unaryContext,0);
	};

	thf_infix_unary() {
	    return this.getTypedRuleContext(Thf_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unary_formula(this);
		}
	}


}



class Thf_prefix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_prefix_unary;
    }

	thf_unary_connective() {
	    return this.getTypedRuleContext(Thf_unary_connectiveContext,0);
	};

	thf_preunit_formula() {
	    return this.getTypedRuleContext(Thf_preunit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_prefix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_prefix_unary(this);
		}
	}


}



class Thf_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_infix_unary;
    }

	thf_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_termContext,i);
	    }
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_infix_unary(this);
		}
	}


}



class Thf_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_atomic_formula;
    }

	thf_plain_atomic() {
	    return this.getTypedRuleContext(Thf_plain_atomicContext,0);
	};

	thf_defined_atomic() {
	    return this.getTypedRuleContext(Thf_defined_atomicContext,0);
	};

	thf_system_atomic() {
	    return this.getTypedRuleContext(Thf_system_atomicContext,0);
	};

	thf_fof_function() {
	    return this.getTypedRuleContext(Thf_fof_functionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_atomic_formula(this);
		}
	}


}



class Thf_plain_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_plain_atomic;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	thf_tuple() {
	    return this.getTypedRuleContext(Thf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_plain_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_plain_atomic(this);
		}
	}


}



class Thf_defined_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_defined_atomic;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	thf_defined_term() {
	    return this.getTypedRuleContext(Thf_defined_termContext,0);
	};

	thf_conn_term() {
	    return this.getTypedRuleContext(Thf_conn_termContext,0);
	};

	nhf_long_connective() {
	    return this.getTypedRuleContext(Nhf_long_connectiveContext,0);
	};

	thf_let() {
	    return this.getTypedRuleContext(Thf_letContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_defined_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_defined_atomic(this);
		}
	}


}



class Thf_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_defined_term;
    }

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	th1_defined_term() {
	    return this.getTypedRuleContext(Th1_defined_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_defined_term(this);
		}
	}


}



class Thf_defined_infixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_defined_infix;
    }

	thf_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_defined_infix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_defined_infix(this);
		}
	}


}



class Thf_system_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_system_atomic;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_system_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_system_atomic(this);
		}
	}


}



class Thf_letContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let;
    }

	thf_let_types() {
	    return this.getTypedRuleContext(Thf_let_typesContext,0);
	};

	thf_let_defns() {
	    return this.getTypedRuleContext(Thf_let_defnsContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let(this);
		}
	}


}



class Thf_let_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_types;
    }

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_atom_typing_list() {
	    return this.getTypedRuleContext(Thf_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_types(this);
		}
	}


}



class Thf_atom_typing_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_atom_typing_list;
    }

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_atom_typing_list() {
	    return this.getTypedRuleContext(Thf_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_atom_typing_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_atom_typing_list(this);
		}
	}


}



class Thf_let_defnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_defns;
    }

	thf_let_defn() {
	    return this.getTypedRuleContext(Thf_let_defnContext,0);
	};

	thf_let_defn_list() {
	    return this.getTypedRuleContext(Thf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_defns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_defns(this);
		}
	}


}



class Thf_let_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_defn;
    }

	thf_logic_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_logic_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_logic_formulaContext,i);
	    }
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_defn(this);
		}
	}


}



class Thf_let_defn_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_defn_list;
    }

	thf_let_defn() {
	    return this.getTypedRuleContext(Thf_let_defnContext,0);
	};

	thf_let_defn_list() {
	    return this.getTypedRuleContext(Thf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_defn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_defn_list(this);
		}
	}


}



class Thf_unitary_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unitary_term;
    }

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unitary_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unitary_term(this);
		}
	}


}



class Thf_conn_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_conn_term;
    }

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	assoc_connective() {
	    return this.getTypedRuleContext(Assoc_connectiveContext,0);
	};

	infix_equality() {
	    return this.getTypedRuleContext(Infix_equalityContext,0);
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	thf_unary_connective() {
	    return this.getTypedRuleContext(Thf_unary_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_conn_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_conn_term(this);
		}
	}


}



class Thf_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_tuple;
    }

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_tuple(this);
		}
	}


}



class Thf_fof_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_fof_function;
    }

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	thf_arguments() {
	    return this.getTypedRuleContext(Thf_argumentsContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_fof_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_fof_function(this);
		}
	}


}



class Thf_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_arguments;
    }

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_arguments(this);
		}
	}


}



class Thf_formula_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_formula_list;
    }

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_formula_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_formula_list(this);
		}
	}


}



class Thf_atom_typingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_atom_typing;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	thf_top_level_type() {
	    return this.getTypedRuleContext(Thf_top_level_typeContext,0);
	};

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_atom_typing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_atom_typing(this);
		}
	}


}



class Thf_top_level_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_top_level_type;
    }

	thf_unitary_type() {
	    return this.getTypedRuleContext(Thf_unitary_typeContext,0);
	};

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	thf_apply_type() {
	    return this.getTypedRuleContext(Thf_apply_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_top_level_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_top_level_type(this);
		}
	}


}



class Thf_unitary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unitary_type;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unitary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unitary_type(this);
		}
	}


}



class Thf_apply_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_apply_type;
    }

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_apply_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_apply_type(this);
		}
	}


}



class Thf_binary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_type;
    }

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	thf_xprod_type() {
	    return this.getTypedRuleContext(Thf_xprod_typeContext,0);
	};

	thf_union_type() {
	    return this.getTypedRuleContext(Thf_union_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_type(this);
		}
	}


}



class Thf_mapping_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_mapping_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Arrow() {
	    return this.getToken(TPTPParser.Arrow, 0);
	};

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_mapping_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_mapping_type(this);
		}
	}


}



class Thf_xprod_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_xprod_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Star() {
	    return this.getToken(TPTPParser.Star, 0);
	};

	thf_xprod_type() {
	    return this.getTypedRuleContext(Thf_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_xprod_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_xprod_type(this);
		}
	}


}



class Thf_union_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_union_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Plus() {
	    return this.getToken(TPTPParser.Plus, 0);
	};

	thf_union_type() {
	    return this.getTypedRuleContext(Thf_union_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_union_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_union_type(this);
		}
	}


}



class Thf_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_subtype;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	subtype_sign() {
	    return this.getTypedRuleContext(Subtype_signContext,0);
	};

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_subtype(this);
		}
	}


}



class Thf_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_definition;
    }

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	identical() {
	    return this.getTypedRuleContext(IdenticalContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_definition(this);
		}
	}


}



class Thf_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_sequent;
    }

	thf_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Thf_tupleContext,i);
	    }
	};

	gentzen_arrow() {
	    return this.getTypedRuleContext(Gentzen_arrowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_sequent(this);
		}
	}


}



class Tff_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_formula;
    }

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_subtype() {
	    return this.getTypedRuleContext(Tff_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_formula(this);
		}
	}


}



class Tff_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_logic_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_unary_formula() {
	    return this.getTypedRuleContext(Tff_unary_formulaContext,0);
	};

	tff_binary_formula() {
	    return this.getTypedRuleContext(Tff_binary_formulaContext,0);
	};

	tff_defined_infix() {
	    return this.getTypedRuleContext(Tff_defined_infixContext,0);
	};

	txf_definition() {
	    return this.getTypedRuleContext(Txf_definitionContext,0);
	};

	txf_sequent() {
	    return this.getTypedRuleContext(Txf_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_logic_formula(this);
		}
	}


}



class Tff_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_binary_formula;
    }

	tff_binary_nonassoc() {
	    return this.getTypedRuleContext(Tff_binary_nonassocContext,0);
	};

	tff_binary_assoc() {
	    return this.getTypedRuleContext(Tff_binary_assocContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_binary_formula(this);
		}
	}


}



class Tff_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_binary_nonassoc;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_binary_nonassoc(this);
		}
	}


}



class Tff_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_binary_assoc;
    }

	tff_or_formula() {
	    return this.getTypedRuleContext(Tff_or_formulaContext,0);
	};

	tff_and_formula() {
	    return this.getTypedRuleContext(Tff_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_binary_assoc(this);
		}
	}


}



class Tff_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_or_formula;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	Vline() {
	    return this.getToken(TPTPParser.Vline, 0);
	};

	tff_or_formula() {
	    return this.getTypedRuleContext(Tff_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_or_formula(this);
		}
	}


}



class Tff_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_and_formula;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	tff_and_formula() {
	    return this.getTypedRuleContext(Tff_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_and_formula(this);
		}
	}


}



class Tff_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unit_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_unary_formula() {
	    return this.getTypedRuleContext(Tff_unary_formulaContext,0);
	};

	tff_defined_infix() {
	    return this.getTypedRuleContext(Tff_defined_infixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unit_formula(this);
		}
	}


}



class Tff_preunit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_preunit_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_prefix_unary() {
	    return this.getTypedRuleContext(Tff_prefix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_preunit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_preunit_formula(this);
		}
	}


}



class Tff_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unitary_formula;
    }

	tff_quantified_formula() {
	    return this.getTypedRuleContext(Tff_quantified_formulaContext,0);
	};

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	txf_unitary_formula() {
	    return this.getTypedRuleContext(Txf_unitary_formulaContext,0);
	};

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unitary_formula(this);
		}
	}


}



class Txf_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_unitary_formula;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_unitary_formula(this);
		}
	}


}



class Tff_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_quantified_formula;
    }

	tff_quantifier() {
	    return this.getTypedRuleContext(Tff_quantifierContext,0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tff_unit_formula() {
	    return this.getTypedRuleContext(Tff_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_quantified_formula(this);
		}
	}


}



class Tff_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_variable_list;
    }

	tff_variable() {
	    return this.getTypedRuleContext(Tff_variableContext,0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_variable_list(this);
		}
	}


}



class Tff_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_variable;
    }

	tff_typed_variable() {
	    return this.getTypedRuleContext(Tff_typed_variableContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_variable(this);
		}
	}


}



class Tff_typed_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_typed_variable;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_typed_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_typed_variable(this);
		}
	}


}



class Tff_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unary_formula;
    }

	tff_prefix_unary() {
	    return this.getTypedRuleContext(Tff_prefix_unaryContext,0);
	};

	tff_infix_unary() {
	    return this.getTypedRuleContext(Tff_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unary_formula(this);
		}
	}


}



class Tff_prefix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_prefix_unary;
    }

	tff_unary_connective() {
	    return this.getTypedRuleContext(Tff_unary_connectiveContext,0);
	};

	tff_preunit_formula() {
	    return this.getTypedRuleContext(Tff_preunit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_prefix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_prefix_unary(this);
		}
	}


}



class Tff_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_infix_unary;
    }

	tff_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unitary_termContext,i);
	    }
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_infix_unary(this);
		}
	}


}



class Tff_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atomic_formula;
    }

	tff_plain_atomic() {
	    return this.getTypedRuleContext(Tff_plain_atomicContext,0);
	};

	tff_defined_atomic() {
	    return this.getTypedRuleContext(Tff_defined_atomicContext,0);
	};

	tff_system_atomic() {
	    return this.getTypedRuleContext(Tff_system_atomicContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atomic_formula(this);
		}
	}


}



class Tff_plain_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_plain_atomic;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_plain_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_plain_atomic(this);
		}
	}


}



class Tff_defined_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_defined_atomic;
    }

	tff_defined_plain() {
	    return this.getTypedRuleContext(Tff_defined_plainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_defined_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_defined_atomic(this);
		}
	}


}



class Tff_defined_plainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_defined_plain;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	nxf_atom() {
	    return this.getTypedRuleContext(Nxf_atomContext,0);
	};

	txf_let() {
	    return this.getTypedRuleContext(Txf_letContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_defined_plain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_defined_plain(this);
		}
	}


}



class Tff_defined_infixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_defined_infix;
    }

	tff_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unitary_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_defined_infix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_defined_infix(this);
		}
	}


}



class Tff_system_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_system_atomic;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_system_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_system_atomic(this);
		}
	}


}



class Txf_letContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let;
    }

	txf_let_types() {
	    return this.getTypedRuleContext(Txf_let_typesContext,0);
	};

	txf_let_defns() {
	    return this.getTypedRuleContext(Txf_let_defnsContext,0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let(this);
		}
	}


}



class Txf_let_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_types;
    }

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_atom_typing_list() {
	    return this.getTypedRuleContext(Tff_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_types(this);
		}
	}


}



class Tff_atom_typing_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atom_typing_list;
    }

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_atom_typing_list() {
	    return this.getTypedRuleContext(Tff_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atom_typing_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atom_typing_list(this);
		}
	}


}



class Txf_let_defnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_defns;
    }

	txf_let_defn() {
	    return this.getTypedRuleContext(Txf_let_defnContext,0);
	};

	txf_let_defn_list() {
	    return this.getTypedRuleContext(Txf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_defns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_defns(this);
		}
	}


}



class Txf_let_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_defn;
    }

	txf_let_LHS() {
	    return this.getTypedRuleContext(Txf_let_LHSContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_defn(this);
		}
	}


}



class Txf_let_LHSContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_LHS;
    }

	tff_plain_atomic() {
	    return this.getTypedRuleContext(Tff_plain_atomicContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_LHS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_LHS(this);
		}
	}


}



class Txf_let_defn_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_defn_list;
    }

	txf_let_defn() {
	    return this.getTypedRuleContext(Txf_let_defnContext,0);
	};

	txf_let_defn_list() {
	    return this.getTypedRuleContext(Txf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_defn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_defn_list(this);
		}
	}


}



class Nxf_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nxf_atom;
    }

	nxf_long_connective() {
	    return this.getTypedRuleContext(Nxf_long_connectiveContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNxf_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNxf_atom(this);
		}
	}


}



class Tff_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_term;
    }

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_term(this);
		}
	}


}



class Tff_unitary_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unitary_term;
    }

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unitary_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unitary_term(this);
		}
	}


}



class Txf_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_tuple;
    }

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_tuple(this);
		}
	}


}



class Tff_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_arguments;
    }

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_arguments(this);
		}
	}


}



class Tff_atom_typingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atom_typing;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	tff_top_level_type() {
	    return this.getTypedRuleContext(Tff_top_level_typeContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atom_typing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atom_typing(this);
		}
	}


}



class Tff_top_level_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_top_level_type;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_non_atomic_type() {
	    return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_top_level_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_top_level_type(this);
		}
	}


}



class Tff_non_atomic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_non_atomic_type;
    }

	tff_mapping_type() {
	    return this.getTypedRuleContext(Tff_mapping_typeContext,0);
	};

	tf1_quantified_type() {
	    return this.getTypedRuleContext(Tf1_quantified_typeContext,0);
	};

	tff_non_atomic_type() {
	    return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_non_atomic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_non_atomic_type(this);
		}
	}


}



class Tf1_quantified_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tf1_quantified_type;
    }

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tff_monotype() {
	    return this.getTypedRuleContext(Tff_monotypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTf1_quantified_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTf1_quantified_type(this);
		}
	}


}



class Tff_monotypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_monotype;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_mapping_type() {
	    return this.getTypedRuleContext(Tff_mapping_typeContext,0);
	};

	tf1_quantified_type() {
	    return this.getTypedRuleContext(Tf1_quantified_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_monotype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_monotype(this);
		}
	}


}



class Tff_unitary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unitary_type;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_xprod_type() {
	    return this.getTypedRuleContext(Tff_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unitary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unitary_type(this);
		}
	}


}



class Tff_atomic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atomic_type;
    }

	type_constant() {
	    return this.getTypedRuleContext(Type_constantContext,0);
	};

	defined_type() {
	    return this.getTypedRuleContext(Defined_typeContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	type_functor() {
	    return this.getTypedRuleContext(Type_functorContext,0);
	};

	tff_type_arguments() {
	    return this.getTypedRuleContext(Tff_type_argumentsContext,0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	txf_tuple_type() {
	    return this.getTypedRuleContext(Txf_tuple_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atomic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atomic_type(this);
		}
	}


}



class Tff_type_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_type_arguments;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_type_arguments() {
	    return this.getTypedRuleContext(Tff_type_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_type_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_type_arguments(this);
		}
	}


}



class Tff_mapping_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_mapping_type;
    }

	tff_unitary_type() {
	    return this.getTypedRuleContext(Tff_unitary_typeContext,0);
	};

	Arrow() {
	    return this.getToken(TPTPParser.Arrow, 0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_mapping_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_mapping_type(this);
		}
	}


}



class Tff_xprod_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_xprod_type;
    }

	tff_unitary_type() {
	    return this.getTypedRuleContext(Tff_unitary_typeContext,0);
	};

	Star() {
	    return this.getToken(TPTPParser.Star, 0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_xprod_type() {
	    return this.getTypedRuleContext(Tff_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_xprod_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_xprod_type(this);
		}
	}


}



class Txf_tuple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_tuple_type;
    }

	tff_type_list() {
	    return this.getTypedRuleContext(Tff_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_tuple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_tuple_type(this);
		}
	}


}



class Tff_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_type_list;
    }

	tff_top_level_type() {
	    return this.getTypedRuleContext(Tff_top_level_typeContext,0);
	};

	tff_type_list() {
	    return this.getTypedRuleContext(Tff_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_type_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_type_list(this);
		}
	}


}



class Tff_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_subtype;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	subtype_sign() {
	    return this.getTypedRuleContext(Subtype_signContext,0);
	};

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_subtype(this);
		}
	}


}



class Txf_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_definition;
    }

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	identical() {
	    return this.getTypedRuleContext(IdenticalContext,0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_definition(this);
		}
	}


}



class Txf_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_sequent;
    }

	txf_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Txf_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Txf_tupleContext,i);
	    }
	};

	gentzen_arrow() {
	    return this.getTypedRuleContext(Gentzen_arrowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_sequent(this);
		}
	}


}



class Nhf_long_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nhf_long_connective;
    }

	ntf_connective_name() {
	    return this.getTypedRuleContext(Ntf_connective_nameContext,0);
	};

	nhf_parameter_list() {
	    return this.getTypedRuleContext(Nhf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNhf_long_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNhf_long_connective(this);
		}
	}


}



class Nhf_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nhf_parameter_list;
    }

	nhf_parameter() {
	    return this.getTypedRuleContext(Nhf_parameterContext,0);
	};

	nhf_parameter_list() {
	    return this.getTypedRuleContext(Nhf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNhf_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNhf_parameter_list(this);
		}
	}


}



class Nhf_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nhf_parameter;
    }

	ntf_index() {
	    return this.getTypedRuleContext(Ntf_indexContext,0);
	};

	nhf_key_pair() {
	    return this.getTypedRuleContext(Nhf_key_pairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNhf_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNhf_parameter(this);
		}
	}


}



class Nhf_key_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nhf_key_pair;
    }

	thf_definition() {
	    return this.getTypedRuleContext(Thf_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNhf_key_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNhf_key_pair(this);
		}
	}


}



class Nxf_long_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nxf_long_connective;
    }

	ntf_connective_name() {
	    return this.getTypedRuleContext(Ntf_connective_nameContext,0);
	};

	nxf_parameter_list() {
	    return this.getTypedRuleContext(Nxf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNxf_long_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNxf_long_connective(this);
		}
	}


}



class Nxf_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nxf_parameter_list;
    }

	nxf_parameter() {
	    return this.getTypedRuleContext(Nxf_parameterContext,0);
	};

	nxf_parameter_list() {
	    return this.getTypedRuleContext(Nxf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNxf_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNxf_parameter_list(this);
		}
	}


}



class Nxf_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nxf_parameter;
    }

	ntf_index() {
	    return this.getTypedRuleContext(Ntf_indexContext,0);
	};

	nxf_key_pair() {
	    return this.getTypedRuleContext(Nxf_key_pairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNxf_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNxf_parameter(this);
		}
	}


}



class Nxf_key_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nxf_key_pair;
    }

	txf_definition() {
	    return this.getTypedRuleContext(Txf_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNxf_key_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNxf_key_pair(this);
		}
	}


}



class Ntf_connective_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_connective_name;
    }

	def_or_sys_constant() {
	    return this.getTypedRuleContext(Def_or_sys_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_connective_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_connective_name(this);
		}
	}


}



class Ntf_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_index;
    }

	Hash() {
	    return this.getToken(TPTPParser.Hash, 0);
	};

	tff_unitary_term() {
	    return this.getTypedRuleContext(Tff_unitary_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_index(this);
		}
	}


}



class Ntf_short_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_short_connective;
    }

	Less_sign() {
	    return this.getToken(TPTPParser.Less_sign, 0);
	};

	Arrow() {
	    return this.getToken(TPTPParser.Arrow, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_short_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_short_connective(this);
		}
	}


}



class Tcf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_formula;
    }

	tcf_logic_formula() {
	    return this.getTypedRuleContext(Tcf_logic_formulaContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_formula(this);
		}
	}


}



class Tcf_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_logic_formula;
    }

	tcf_quantified_formula() {
	    return this.getTypedRuleContext(Tcf_quantified_formulaContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_logic_formula(this);
		}
	}


}



class Tcf_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_quantified_formula;
    }

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tcf_logic_formula() {
	    return this.getTypedRuleContext(Tcf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_quantified_formula(this);
		}
	}


}



class Fof_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_formula;
    }

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	fof_sequent() {
	    return this.getTypedRuleContext(Fof_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_formula(this);
		}
	}


}



class Fof_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_logic_formula;
    }

	fof_binary_formula() {
	    return this.getTypedRuleContext(Fof_binary_formulaContext,0);
	};

	fof_unary_formula() {
	    return this.getTypedRuleContext(Fof_unary_formulaContext,0);
	};

	fof_unitary_formula() {
	    return this.getTypedRuleContext(Fof_unitary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_logic_formula(this);
		}
	}


}



class Fof_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_binary_formula;
    }

	fof_binary_nonassoc() {
	    return this.getTypedRuleContext(Fof_binary_nonassocContext,0);
	};

	fof_binary_assoc() {
	    return this.getTypedRuleContext(Fof_binary_assocContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_binary_formula(this);
		}
	}


}



class Fof_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_binary_nonassoc;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_binary_nonassoc(this);
		}
	}


}



class Fof_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_binary_assoc;
    }

	fof_or_formula() {
	    return this.getTypedRuleContext(Fof_or_formulaContext,0);
	};

	fof_and_formula() {
	    return this.getTypedRuleContext(Fof_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_binary_assoc(this);
		}
	}


}



class Fof_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_or_formula;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	Vline() {
	    return this.getToken(TPTPParser.Vline, 0);
	};

	fof_or_formula() {
	    return this.getTypedRuleContext(Fof_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_or_formula(this);
		}
	}


}



class Fof_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_and_formula;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	fof_and_formula() {
	    return this.getTypedRuleContext(Fof_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_and_formula(this);
		}
	}


}



class Fof_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_unary_formula;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	fof_unit_formula() {
	    return this.getTypedRuleContext(Fof_unit_formulaContext,0);
	};

	fof_infix_unary() {
	    return this.getTypedRuleContext(Fof_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_unary_formula(this);
		}
	}


}



class Fof_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_infix_unary;
    }

	fof_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_termContext);
	    } else {
	        return this.getTypedRuleContext(Fof_termContext,i);
	    }
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_infix_unary(this);
		}
	}


}



class Fof_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_unit_formula;
    }

	fof_unitary_formula() {
	    return this.getTypedRuleContext(Fof_unitary_formulaContext,0);
	};

	fof_unary_formula() {
	    return this.getTypedRuleContext(Fof_unary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_unit_formula(this);
		}
	}


}



class Fof_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_unitary_formula;
    }

	fof_quantified_formula() {
	    return this.getTypedRuleContext(Fof_quantified_formulaContext,0);
	};

	fof_atomic_formula() {
	    return this.getTypedRuleContext(Fof_atomic_formulaContext,0);
	};

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_unitary_formula(this);
		}
	}


}



class Fof_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_quantified_formula;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	fof_variable_list() {
	    return this.getTypedRuleContext(Fof_variable_listContext,0);
	};

	fof_unit_formula() {
	    return this.getTypedRuleContext(Fof_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_quantified_formula(this);
		}
	}


}



class Fof_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_variable_list;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	fof_variable_list() {
	    return this.getTypedRuleContext(Fof_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_variable_list(this);
		}
	}


}



class Fof_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_atomic_formula;
    }

	fof_plain_atomic_formula() {
	    return this.getTypedRuleContext(Fof_plain_atomic_formulaContext,0);
	};

	fof_defined_atomic_formula() {
	    return this.getTypedRuleContext(Fof_defined_atomic_formulaContext,0);
	};

	fof_system_atomic_formula() {
	    return this.getTypedRuleContext(Fof_system_atomic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_atomic_formula(this);
		}
	}


}



class Fof_plain_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_plain_atomic_formula;
    }

	fof_plain_term() {
	    return this.getTypedRuleContext(Fof_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_plain_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_plain_atomic_formula(this);
		}
	}


}



class Fof_defined_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_atomic_formula;
    }

	fof_defined_plain_formula() {
	    return this.getTypedRuleContext(Fof_defined_plain_formulaContext,0);
	};

	fof_defined_infix_formula() {
	    return this.getTypedRuleContext(Fof_defined_infix_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_atomic_formula(this);
		}
	}


}



class Fof_defined_plain_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_plain_formula;
    }

	fof_defined_plain_term() {
	    return this.getTypedRuleContext(Fof_defined_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_plain_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_plain_formula(this);
		}
	}


}



class Fof_defined_infix_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_infix_formula;
    }

	fof_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_termContext);
	    } else {
	        return this.getTypedRuleContext(Fof_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_infix_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_infix_formula(this);
		}
	}


}



class Fof_system_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_system_atomic_formula;
    }

	fof_system_term() {
	    return this.getTypedRuleContext(Fof_system_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_system_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_system_atomic_formula(this);
		}
	}


}



class Fof_plain_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_plain_term;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_plain_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_plain_term(this);
		}
	}


}



class Fof_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_term;
    }

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	fof_defined_atomic_term() {
	    return this.getTypedRuleContext(Fof_defined_atomic_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_term(this);
		}
	}


}



class Fof_defined_atomic_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_atomic_term;
    }

	fof_defined_plain_term() {
	    return this.getTypedRuleContext(Fof_defined_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_atomic_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_atomic_term(this);
		}
	}


}



class Fof_defined_plain_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_plain_term;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_plain_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_plain_term(this);
		}
	}


}



class Fof_system_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_system_term;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_system_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_system_term(this);
		}
	}


}



class Fof_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_arguments;
    }

	fof_term() {
	    return this.getTypedRuleContext(Fof_termContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_arguments(this);
		}
	}


}



class Fof_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_term;
    }

	fof_function_term() {
	    return this.getTypedRuleContext(Fof_function_termContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_term(this);
		}
	}


}



class Fof_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_function_term;
    }

	fof_plain_term() {
	    return this.getTypedRuleContext(Fof_plain_termContext,0);
	};

	fof_defined_term() {
	    return this.getTypedRuleContext(Fof_defined_termContext,0);
	};

	fof_system_term() {
	    return this.getTypedRuleContext(Fof_system_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_function_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_function_term(this);
		}
	}


}



class Fof_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_sequent;
    }

	fof_formula_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_formula_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Fof_formula_tupleContext,i);
	    }
	};

	gentzen_arrow() {
	    return this.getTypedRuleContext(Gentzen_arrowContext,0);
	};

	fof_sequent() {
	    return this.getTypedRuleContext(Fof_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_sequent(this);
		}
	}


}



class Fof_formula_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_formula_tuple;
    }

	fof_formula_tuple_list() {
	    return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_formula_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_formula_tuple(this);
		}
	}


}



class Fof_formula_tuple_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_formula_tuple_list;
    }

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	fof_formula_tuple_list() {
	    return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_formula_tuple_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_formula_tuple_list(this);
		}
	}


}



class Cnf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_formula;
    }

	cnf_disjunction() {
	    return this.getTypedRuleContext(Cnf_disjunctionContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_formula(this);
		}
	}


}



class Cnf_disjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_disjunction;
    }

	cnf_literal() {
	    return this.getTypedRuleContext(Cnf_literalContext,0);
	};

	cnf_disjunction() {
	    return this.getTypedRuleContext(Cnf_disjunctionContext,0);
	};

	Vline() {
	    return this.getToken(TPTPParser.Vline, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_disjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_disjunction(this);
		}
	}


}



class Cnf_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_literal;
    }

	fof_atomic_formula() {
	    return this.getTypedRuleContext(Fof_atomic_formulaContext,0);
	};

	fof_infix_unary() {
	    return this.getTypedRuleContext(Fof_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_literal(this);
		}
	}


}



class Thf_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_quantifier;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	th0_quantifier() {
	    return this.getTypedRuleContext(Th0_quantifierContext,0);
	};

	th1_quantifier() {
	    return this.getTypedRuleContext(Th1_quantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_quantifier(this);
		}
	}


}



class Thf_unary_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unary_connective;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	ntf_short_connective() {
	    return this.getTypedRuleContext(Ntf_short_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unary_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unary_connective(this);
		}
	}


}



class Th1_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_th1_quantifier;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTh1_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTh1_quantifier(this);
		}
	}


}



class Th0_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_th0_quantifier;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTh0_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTh0_quantifier(this);
		}
	}


}



class Subtype_signContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_subtype_sign;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSubtype_sign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSubtype_sign(this);
		}
	}


}



class Tff_unary_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unary_connective;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	ntf_short_connective() {
	    return this.getTypedRuleContext(Ntf_short_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unary_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unary_connective(this);
		}
	}


}



class Tff_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_quantifier;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_quantifier(this);
		}
	}


}



class Fof_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_quantifier;
    }

	Hash() {
	    return this.getToken(TPTPParser.Hash, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_quantifier(this);
		}
	}


}



class Nonassoc_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nonassoc_connective;
    }

	Vline() {
	    return this.getToken(TPTPParser.Vline, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNonassoc_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNonassoc_connective(this);
		}
	}


}



class Assoc_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_assoc_connective;
    }

	Vline() {
	    return this.getToken(TPTPParser.Vline, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAssoc_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAssoc_connective(this);
		}
	}


}



class Unary_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_unary_connective;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterUnary_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitUnary_connective(this);
		}
	}


}



class Gentzen_arrowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_gentzen_arrow;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGentzen_arrow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGentzen_arrow(this);
		}
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_assignment;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAssignment(this);
		}
	}


}



class IdenticalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_identical;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterIdentical(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitIdentical(this);
		}
	}


}



class Type_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_type_constant;
    }

	type_functor() {
	    return this.getTypedRuleContext(Type_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterType_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitType_constant(this);
		}
	}


}



class Type_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_type_functor;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterType_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitType_functor(this);
		}
	}


}



class Defined_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_type;
    }

	atomic_defined_word() {
	    return this.getTypedRuleContext(Atomic_defined_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_type(this);
		}
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atom;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtom(this);
		}
	}


}



class Untyped_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_untyped_atom;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterUntyped_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitUntyped_atom(this);
		}
	}


}



class Defined_infix_predContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_infix_pred;
    }

	infix_equality() {
	    return this.getTypedRuleContext(Infix_equalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_infix_pred(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_infix_pred(this);
		}
	}


}



class Infix_equalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_infix_equality;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInfix_equality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInfix_equality(this);
		}
	}


}



class Infix_inequalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_infix_inequality;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInfix_inequality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInfix_inequality(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_constant;
    }

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitConstant(this);
		}
	}


}



class FunctorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_functor;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFunctor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFunctor(this);
		}
	}


}



class Defined_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_constant;
    }

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_constant(this);
		}
	}


}



class Defined_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_functor;
    }

	atomic_defined_word() {
	    return this.getTypedRuleContext(Atomic_defined_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_functor(this);
		}
	}


}



class System_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_system_constant;
    }

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSystem_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSystem_constant(this);
		}
	}


}



class System_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_system_functor;
    }

	atomic_system_word() {
	    return this.getTypedRuleContext(Atomic_system_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSystem_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSystem_functor(this);
		}
	}


}



class Def_or_sys_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_def_or_sys_constant;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDef_or_sys_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDef_or_sys_constant(this);
		}
	}


}



class Th1_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_th1_defined_term;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTh1_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTh1_defined_term(this);
		}
	}


}



class Defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_term;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	Distinct_object() {
	    return this.getToken(TPTPParser.Distinct_object, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_term(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_variable;
    }

	Upper_word() {
	    return this.getToken(TPTPParser.Upper_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitVariable(this);
		}
	}


}



class SourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_source;
    }

	dag_source() {
	    return this.getTypedRuleContext(Dag_sourceContext,0);
	};

	internal_source() {
	    return this.getTypedRuleContext(Internal_sourceContext,0);
	};

	external_source() {
	    return this.getTypedRuleContext(External_sourceContext,0);
	};

	sources() {
	    return this.getTypedRuleContext(SourcesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSource(this);
		}
	}


}



class SourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_sources;
    }

	source() {
	    return this.getTypedRuleContext(SourceContext,0);
	};

	sources() {
	    return this.getTypedRuleContext(SourcesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSources(this);
		}
	}


}



class Dag_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_dag_source;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	inference_record() {
	    return this.getTypedRuleContext(Inference_recordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDag_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDag_source(this);
		}
	}


}



class Inference_recordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_record;
    }

	inference_rule() {
	    return this.getTypedRuleContext(Inference_ruleContext,0);
	};

	useful_info() {
	    return this.getTypedRuleContext(Useful_infoContext,0);
	};

	parents() {
	    return this.getTypedRuleContext(ParentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_record(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_record(this);
		}
	}


}



class Inference_ruleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_rule;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_rule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_rule(this);
		}
	}


}



class Internal_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_internal_source;
    }

	intro_type() {
	    return this.getTypedRuleContext(Intro_typeContext,0);
	};

	useful_info() {
	    return this.getTypedRuleContext(Useful_infoContext,0);
	};

	parents() {
	    return this.getTypedRuleContext(ParentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInternal_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInternal_source(this);
		}
	}


}



class Intro_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_intro_type;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterIntro_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitIntro_type(this);
		}
	}


}



class External_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_external_source;
    }

	file_source() {
	    return this.getTypedRuleContext(File_sourceContext,0);
	};

	theory() {
	    return this.getTypedRuleContext(TheoryContext,0);
	};

	creator_source() {
	    return this.getTypedRuleContext(Creator_sourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterExternal_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitExternal_source(this);
		}
	}


}



class File_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_file_source;
    }

	file_name() {
	    return this.getTypedRuleContext(File_nameContext,0);
	};

	file_info() {
	    return this.getTypedRuleContext(File_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFile_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFile_source(this);
		}
	}


}



class File_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_file_info;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFile_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFile_info(this);
		}
	}


}



class TheoryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_theory;
    }

	theory_name() {
	    return this.getTypedRuleContext(Theory_nameContext,0);
	};

	optional_info() {
	    return this.getTypedRuleContext(Optional_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTheory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTheory(this);
		}
	}


}



class Theory_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_theory_name;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTheory_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTheory_name(this);
		}
	}


}



class Creator_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_creator_source;
    }

	creator_name() {
	    return this.getTypedRuleContext(Creator_nameContext,0);
	};

	useful_info() {
	    return this.getTypedRuleContext(Useful_infoContext,0);
	};

	parents() {
	    return this.getTypedRuleContext(ParentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCreator_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCreator_source(this);
		}
	}


}



class Creator_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_creator_name;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCreator_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCreator_name(this);
		}
	}


}



class ParentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_parents;
    }

	parent_list() {
	    return this.getTypedRuleContext(Parent_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterParents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitParents(this);
		}
	}


}



class Parent_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_parent_list;
    }

	parent_info = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Parent_infoContext);
	    } else {
	        return this.getTypedRuleContext(Parent_infoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterParent_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitParent_list(this);
		}
	}


}



class Parent_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_parent_info;
    }

	source() {
	    return this.getTypedRuleContext(SourceContext,0);
	};

	parent_details() {
	    return this.getTypedRuleContext(Parent_detailsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterParent_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitParent_info(this);
		}
	}


}



class Parent_detailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_parent_details;
    }

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterParent_details(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitParent_details(this);
		}
	}


}



class Optional_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_optional_info;
    }

	useful_info() {
	    return this.getTypedRuleContext(Useful_infoContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterOptional_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitOptional_info(this);
		}
	}


}



class Useful_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_useful_info;
    }

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterUseful_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitUseful_info(this);
		}
	}


}



class IncludeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_include;
    }

	file_name() {
	    return this.getTypedRuleContext(File_nameContext,0);
	};

	include_optionals() {
	    return this.getTypedRuleContext(Include_optionalsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInclude(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInclude(this);
		}
	}


}



class Include_optionalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_include_optionals;
    }

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	formula_selection() {
	    return this.getTypedRuleContext(Formula_selectionContext,0);
	};

	space_name() {
	    return this.getTypedRuleContext(Space_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInclude_optionals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInclude_optionals(this);
		}
	}


}



class Formula_selectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_formula_selection;
    }

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	Star() {
	    return this.getToken(TPTPParser.Star, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFormula_selection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFormula_selection(this);
		}
	}


}



class Name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_name_list;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterName_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitName_list(this);
		}
	}


}



class Space_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_space_name;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSpace_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSpace_name(this);
		}
	}


}



class General_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_term;
    }

	general_data() {
	    return this.getTypedRuleContext(General_dataContext,0);
	};

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_term(this);
		}
	}


}



class General_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_data;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	general_function() {
	    return this.getTypedRuleContext(General_functionContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	Distinct_object() {
	    return this.getToken(TPTPParser.Distinct_object, 0);
	};

	formula_data() {
	    return this.getTypedRuleContext(Formula_dataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_data(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_data(this);
		}
	}


}



class General_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_function;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_function(this);
		}
	}


}



class Formula_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_formula_data;
    }

	thf_formula() {
	    return this.getTypedRuleContext(Thf_formulaContext,0);
	};

	tff_formula() {
	    return this.getTypedRuleContext(Tff_formulaContext,0);
	};

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	fof_term() {
	    return this.getTypedRuleContext(Fof_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFormula_data(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFormula_data(this);
		}
	}


}



class General_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_list;
    }

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_list(this);
		}
	}


}



class General_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_terms;
    }

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_terms(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_name;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	Integer() {
	    return this.getToken(TPTPParser.Integer, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitName(this);
		}
	}


}



class Atomic_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atomic_word;
    }

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	Single_quoted() {
	    return this.getToken(TPTPParser.Single_quoted, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtomic_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtomic_word(this);
		}
	}


}



class Atomic_defined_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atomic_defined_word;
    }

	Dollar_word() {
	    return this.getToken(TPTPParser.Dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtomic_defined_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtomic_defined_word(this);
		}
	}


}



class Atomic_system_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atomic_system_word;
    }

	Dollar_dollar_word() {
	    return this.getToken(TPTPParser.Dollar_dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtomic_system_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtomic_system_word(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_number;
    }

	Integer() {
	    return this.getToken(TPTPParser.Integer, 0);
	};

	Rational() {
	    return this.getToken(TPTPParser.Rational, 0);
	};

	Real() {
	    return this.getToken(TPTPParser.Real, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNumber(this);
		}
	}


}



class File_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_file_name;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFile_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFile_name(this);
		}
	}


}



class NullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_null;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNull(this);
		}
	}


}




TPTPParser.Tptp_fileContext = Tptp_fileContext; 
TPTPParser.Tptp_inputContext = Tptp_inputContext; 
TPTPParser.Annotated_formulaContext = Annotated_formulaContext; 
TPTPParser.Tpi_annotatedContext = Tpi_annotatedContext; 
TPTPParser.Tpi_formulaContext = Tpi_formulaContext; 
TPTPParser.Thf_annotatedContext = Thf_annotatedContext; 
TPTPParser.Tff_annotatedContext = Tff_annotatedContext; 
TPTPParser.Tcf_annotatedContext = Tcf_annotatedContext; 
TPTPParser.Fof_annotatedContext = Fof_annotatedContext; 
TPTPParser.Cnf_annotatedContext = Cnf_annotatedContext; 
TPTPParser.AnnotationsContext = AnnotationsContext; 
TPTPParser.Formula_roleContext = Formula_roleContext; 
TPTPParser.Thf_formulaContext = Thf_formulaContext; 
TPTPParser.Thf_logic_formulaContext = Thf_logic_formulaContext; 
TPTPParser.Thf_binary_formulaContext = Thf_binary_formulaContext; 
TPTPParser.Thf_binary_nonassocContext = Thf_binary_nonassocContext; 
TPTPParser.Thf_binary_assocContext = Thf_binary_assocContext; 
TPTPParser.Thf_or_formulaContext = Thf_or_formulaContext; 
TPTPParser.Thf_and_formulaContext = Thf_and_formulaContext; 
TPTPParser.Thf_apply_formulaContext = Thf_apply_formulaContext; 
TPTPParser.Thf_unit_formulaContext = Thf_unit_formulaContext; 
TPTPParser.Thf_preunit_formulaContext = Thf_preunit_formulaContext; 
TPTPParser.Thf_unitary_formulaContext = Thf_unitary_formulaContext; 
TPTPParser.Thf_quantified_formulaContext = Thf_quantified_formulaContext; 
TPTPParser.Thf_quantificationContext = Thf_quantificationContext; 
TPTPParser.Thf_variable_listContext = Thf_variable_listContext; 
TPTPParser.Thf_typed_variableContext = Thf_typed_variableContext; 
TPTPParser.Thf_unary_formulaContext = Thf_unary_formulaContext; 
TPTPParser.Thf_prefix_unaryContext = Thf_prefix_unaryContext; 
TPTPParser.Thf_infix_unaryContext = Thf_infix_unaryContext; 
TPTPParser.Thf_atomic_formulaContext = Thf_atomic_formulaContext; 
TPTPParser.Thf_plain_atomicContext = Thf_plain_atomicContext; 
TPTPParser.Thf_defined_atomicContext = Thf_defined_atomicContext; 
TPTPParser.Thf_defined_termContext = Thf_defined_termContext; 
TPTPParser.Thf_defined_infixContext = Thf_defined_infixContext; 
TPTPParser.Thf_system_atomicContext = Thf_system_atomicContext; 
TPTPParser.Thf_letContext = Thf_letContext; 
TPTPParser.Thf_let_typesContext = Thf_let_typesContext; 
TPTPParser.Thf_atom_typing_listContext = Thf_atom_typing_listContext; 
TPTPParser.Thf_let_defnsContext = Thf_let_defnsContext; 
TPTPParser.Thf_let_defnContext = Thf_let_defnContext; 
TPTPParser.Thf_let_defn_listContext = Thf_let_defn_listContext; 
TPTPParser.Thf_unitary_termContext = Thf_unitary_termContext; 
TPTPParser.Thf_conn_termContext = Thf_conn_termContext; 
TPTPParser.Thf_tupleContext = Thf_tupleContext; 
TPTPParser.Thf_fof_functionContext = Thf_fof_functionContext; 
TPTPParser.Thf_argumentsContext = Thf_argumentsContext; 
TPTPParser.Thf_formula_listContext = Thf_formula_listContext; 
TPTPParser.Thf_atom_typingContext = Thf_atom_typingContext; 
TPTPParser.Thf_top_level_typeContext = Thf_top_level_typeContext; 
TPTPParser.Thf_unitary_typeContext = Thf_unitary_typeContext; 
TPTPParser.Thf_apply_typeContext = Thf_apply_typeContext; 
TPTPParser.Thf_binary_typeContext = Thf_binary_typeContext; 
TPTPParser.Thf_mapping_typeContext = Thf_mapping_typeContext; 
TPTPParser.Thf_xprod_typeContext = Thf_xprod_typeContext; 
TPTPParser.Thf_union_typeContext = Thf_union_typeContext; 
TPTPParser.Thf_subtypeContext = Thf_subtypeContext; 
TPTPParser.Thf_definitionContext = Thf_definitionContext; 
TPTPParser.Thf_sequentContext = Thf_sequentContext; 
TPTPParser.Tff_formulaContext = Tff_formulaContext; 
TPTPParser.Tff_logic_formulaContext = Tff_logic_formulaContext; 
TPTPParser.Tff_binary_formulaContext = Tff_binary_formulaContext; 
TPTPParser.Tff_binary_nonassocContext = Tff_binary_nonassocContext; 
TPTPParser.Tff_binary_assocContext = Tff_binary_assocContext; 
TPTPParser.Tff_or_formulaContext = Tff_or_formulaContext; 
TPTPParser.Tff_and_formulaContext = Tff_and_formulaContext; 
TPTPParser.Tff_unit_formulaContext = Tff_unit_formulaContext; 
TPTPParser.Tff_preunit_formulaContext = Tff_preunit_formulaContext; 
TPTPParser.Tff_unitary_formulaContext = Tff_unitary_formulaContext; 
TPTPParser.Txf_unitary_formulaContext = Txf_unitary_formulaContext; 
TPTPParser.Tff_quantified_formulaContext = Tff_quantified_formulaContext; 
TPTPParser.Tff_variable_listContext = Tff_variable_listContext; 
TPTPParser.Tff_variableContext = Tff_variableContext; 
TPTPParser.Tff_typed_variableContext = Tff_typed_variableContext; 
TPTPParser.Tff_unary_formulaContext = Tff_unary_formulaContext; 
TPTPParser.Tff_prefix_unaryContext = Tff_prefix_unaryContext; 
TPTPParser.Tff_infix_unaryContext = Tff_infix_unaryContext; 
TPTPParser.Tff_atomic_formulaContext = Tff_atomic_formulaContext; 
TPTPParser.Tff_plain_atomicContext = Tff_plain_atomicContext; 
TPTPParser.Tff_defined_atomicContext = Tff_defined_atomicContext; 
TPTPParser.Tff_defined_plainContext = Tff_defined_plainContext; 
TPTPParser.Tff_defined_infixContext = Tff_defined_infixContext; 
TPTPParser.Tff_system_atomicContext = Tff_system_atomicContext; 
TPTPParser.Txf_letContext = Txf_letContext; 
TPTPParser.Txf_let_typesContext = Txf_let_typesContext; 
TPTPParser.Tff_atom_typing_listContext = Tff_atom_typing_listContext; 
TPTPParser.Txf_let_defnsContext = Txf_let_defnsContext; 
TPTPParser.Txf_let_defnContext = Txf_let_defnContext; 
TPTPParser.Txf_let_LHSContext = Txf_let_LHSContext; 
TPTPParser.Txf_let_defn_listContext = Txf_let_defn_listContext; 
TPTPParser.Nxf_atomContext = Nxf_atomContext; 
TPTPParser.Tff_termContext = Tff_termContext; 
TPTPParser.Tff_unitary_termContext = Tff_unitary_termContext; 
TPTPParser.Txf_tupleContext = Txf_tupleContext; 
TPTPParser.Tff_argumentsContext = Tff_argumentsContext; 
TPTPParser.Tff_atom_typingContext = Tff_atom_typingContext; 
TPTPParser.Tff_top_level_typeContext = Tff_top_level_typeContext; 
TPTPParser.Tff_non_atomic_typeContext = Tff_non_atomic_typeContext; 
TPTPParser.Tf1_quantified_typeContext = Tf1_quantified_typeContext; 
TPTPParser.Tff_monotypeContext = Tff_monotypeContext; 
TPTPParser.Tff_unitary_typeContext = Tff_unitary_typeContext; 
TPTPParser.Tff_atomic_typeContext = Tff_atomic_typeContext; 
TPTPParser.Tff_type_argumentsContext = Tff_type_argumentsContext; 
TPTPParser.Tff_mapping_typeContext = Tff_mapping_typeContext; 
TPTPParser.Tff_xprod_typeContext = Tff_xprod_typeContext; 
TPTPParser.Txf_tuple_typeContext = Txf_tuple_typeContext; 
TPTPParser.Tff_type_listContext = Tff_type_listContext; 
TPTPParser.Tff_subtypeContext = Tff_subtypeContext; 
TPTPParser.Txf_definitionContext = Txf_definitionContext; 
TPTPParser.Txf_sequentContext = Txf_sequentContext; 
TPTPParser.Nhf_long_connectiveContext = Nhf_long_connectiveContext; 
TPTPParser.Nhf_parameter_listContext = Nhf_parameter_listContext; 
TPTPParser.Nhf_parameterContext = Nhf_parameterContext; 
TPTPParser.Nhf_key_pairContext = Nhf_key_pairContext; 
TPTPParser.Nxf_long_connectiveContext = Nxf_long_connectiveContext; 
TPTPParser.Nxf_parameter_listContext = Nxf_parameter_listContext; 
TPTPParser.Nxf_parameterContext = Nxf_parameterContext; 
TPTPParser.Nxf_key_pairContext = Nxf_key_pairContext; 
TPTPParser.Ntf_connective_nameContext = Ntf_connective_nameContext; 
TPTPParser.Ntf_indexContext = Ntf_indexContext; 
TPTPParser.Ntf_short_connectiveContext = Ntf_short_connectiveContext; 
TPTPParser.Tcf_formulaContext = Tcf_formulaContext; 
TPTPParser.Tcf_logic_formulaContext = Tcf_logic_formulaContext; 
TPTPParser.Tcf_quantified_formulaContext = Tcf_quantified_formulaContext; 
TPTPParser.Fof_formulaContext = Fof_formulaContext; 
TPTPParser.Fof_logic_formulaContext = Fof_logic_formulaContext; 
TPTPParser.Fof_binary_formulaContext = Fof_binary_formulaContext; 
TPTPParser.Fof_binary_nonassocContext = Fof_binary_nonassocContext; 
TPTPParser.Fof_binary_assocContext = Fof_binary_assocContext; 
TPTPParser.Fof_or_formulaContext = Fof_or_formulaContext; 
TPTPParser.Fof_and_formulaContext = Fof_and_formulaContext; 
TPTPParser.Fof_unary_formulaContext = Fof_unary_formulaContext; 
TPTPParser.Fof_infix_unaryContext = Fof_infix_unaryContext; 
TPTPParser.Fof_unit_formulaContext = Fof_unit_formulaContext; 
TPTPParser.Fof_unitary_formulaContext = Fof_unitary_formulaContext; 
TPTPParser.Fof_quantified_formulaContext = Fof_quantified_formulaContext; 
TPTPParser.Fof_variable_listContext = Fof_variable_listContext; 
TPTPParser.Fof_atomic_formulaContext = Fof_atomic_formulaContext; 
TPTPParser.Fof_plain_atomic_formulaContext = Fof_plain_atomic_formulaContext; 
TPTPParser.Fof_defined_atomic_formulaContext = Fof_defined_atomic_formulaContext; 
TPTPParser.Fof_defined_plain_formulaContext = Fof_defined_plain_formulaContext; 
TPTPParser.Fof_defined_infix_formulaContext = Fof_defined_infix_formulaContext; 
TPTPParser.Fof_system_atomic_formulaContext = Fof_system_atomic_formulaContext; 
TPTPParser.Fof_plain_termContext = Fof_plain_termContext; 
TPTPParser.Fof_defined_termContext = Fof_defined_termContext; 
TPTPParser.Fof_defined_atomic_termContext = Fof_defined_atomic_termContext; 
TPTPParser.Fof_defined_plain_termContext = Fof_defined_plain_termContext; 
TPTPParser.Fof_system_termContext = Fof_system_termContext; 
TPTPParser.Fof_argumentsContext = Fof_argumentsContext; 
TPTPParser.Fof_termContext = Fof_termContext; 
TPTPParser.Fof_function_termContext = Fof_function_termContext; 
TPTPParser.Fof_sequentContext = Fof_sequentContext; 
TPTPParser.Fof_formula_tupleContext = Fof_formula_tupleContext; 
TPTPParser.Fof_formula_tuple_listContext = Fof_formula_tuple_listContext; 
TPTPParser.Cnf_formulaContext = Cnf_formulaContext; 
TPTPParser.Cnf_disjunctionContext = Cnf_disjunctionContext; 
TPTPParser.Cnf_literalContext = Cnf_literalContext; 
TPTPParser.Thf_quantifierContext = Thf_quantifierContext; 
TPTPParser.Thf_unary_connectiveContext = Thf_unary_connectiveContext; 
TPTPParser.Th1_quantifierContext = Th1_quantifierContext; 
TPTPParser.Th0_quantifierContext = Th0_quantifierContext; 
TPTPParser.Subtype_signContext = Subtype_signContext; 
TPTPParser.Tff_unary_connectiveContext = Tff_unary_connectiveContext; 
TPTPParser.Tff_quantifierContext = Tff_quantifierContext; 
TPTPParser.Fof_quantifierContext = Fof_quantifierContext; 
TPTPParser.Nonassoc_connectiveContext = Nonassoc_connectiveContext; 
TPTPParser.Assoc_connectiveContext = Assoc_connectiveContext; 
TPTPParser.Unary_connectiveContext = Unary_connectiveContext; 
TPTPParser.Gentzen_arrowContext = Gentzen_arrowContext; 
TPTPParser.AssignmentContext = AssignmentContext; 
TPTPParser.IdenticalContext = IdenticalContext; 
TPTPParser.Type_constantContext = Type_constantContext; 
TPTPParser.Type_functorContext = Type_functorContext; 
TPTPParser.Defined_typeContext = Defined_typeContext; 
TPTPParser.AtomContext = AtomContext; 
TPTPParser.Untyped_atomContext = Untyped_atomContext; 
TPTPParser.Defined_infix_predContext = Defined_infix_predContext; 
TPTPParser.Infix_equalityContext = Infix_equalityContext; 
TPTPParser.Infix_inequalityContext = Infix_inequalityContext; 
TPTPParser.ConstantContext = ConstantContext; 
TPTPParser.FunctorContext = FunctorContext; 
TPTPParser.Defined_constantContext = Defined_constantContext; 
TPTPParser.Defined_functorContext = Defined_functorContext; 
TPTPParser.System_constantContext = System_constantContext; 
TPTPParser.System_functorContext = System_functorContext; 
TPTPParser.Def_or_sys_constantContext = Def_or_sys_constantContext; 
TPTPParser.Th1_defined_termContext = Th1_defined_termContext; 
TPTPParser.Defined_termContext = Defined_termContext; 
TPTPParser.VariableContext = VariableContext; 
TPTPParser.SourceContext = SourceContext; 
TPTPParser.SourcesContext = SourcesContext; 
TPTPParser.Dag_sourceContext = Dag_sourceContext; 
TPTPParser.Inference_recordContext = Inference_recordContext; 
TPTPParser.Inference_ruleContext = Inference_ruleContext; 
TPTPParser.Internal_sourceContext = Internal_sourceContext; 
TPTPParser.Intro_typeContext = Intro_typeContext; 
TPTPParser.External_sourceContext = External_sourceContext; 
TPTPParser.File_sourceContext = File_sourceContext; 
TPTPParser.File_infoContext = File_infoContext; 
TPTPParser.TheoryContext = TheoryContext; 
TPTPParser.Theory_nameContext = Theory_nameContext; 
TPTPParser.Creator_sourceContext = Creator_sourceContext; 
TPTPParser.Creator_nameContext = Creator_nameContext; 
TPTPParser.ParentsContext = ParentsContext; 
TPTPParser.Parent_listContext = Parent_listContext; 
TPTPParser.Parent_infoContext = Parent_infoContext; 
TPTPParser.Parent_detailsContext = Parent_detailsContext; 
TPTPParser.Optional_infoContext = Optional_infoContext; 
TPTPParser.Useful_infoContext = Useful_infoContext; 
TPTPParser.IncludeContext = IncludeContext; 
TPTPParser.Include_optionalsContext = Include_optionalsContext; 
TPTPParser.Formula_selectionContext = Formula_selectionContext; 
TPTPParser.Name_listContext = Name_listContext; 
TPTPParser.Space_nameContext = Space_nameContext; 
TPTPParser.General_termContext = General_termContext; 
TPTPParser.General_dataContext = General_dataContext; 
TPTPParser.General_functionContext = General_functionContext; 
TPTPParser.Formula_dataContext = Formula_dataContext; 
TPTPParser.General_listContext = General_listContext; 
TPTPParser.General_termsContext = General_termsContext; 
TPTPParser.NameContext = NameContext; 
TPTPParser.Atomic_wordContext = Atomic_wordContext; 
TPTPParser.Atomic_defined_wordContext = Atomic_defined_wordContext; 
TPTPParser.Atomic_system_wordContext = Atomic_system_wordContext; 
TPTPParser.NumberContext = NumberContext; 
TPTPParser.File_nameContext = File_nameContext; 
TPTPParser.NullContext = NullContext; 
